/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// Oauth2ApiService Oauth2Api service
type Oauth2ApiService service

type ApiListOAUTH2AuthorizationServersRequest struct {
	ctx _context.Context
	ApiService *Oauth2ApiService
	filter *string
	count *int64
	startIndex *int64
	sortBy *string
	sortOrder *string
	attributes *[]string
	excludedAttributes *[]string
	forTime *time.Time
}

func (r ApiListOAUTH2AuthorizationServersRequest) Filter(filter string) ApiListOAUTH2AuthorizationServersRequest {
	r.filter = &filter
	return r
}
func (r ApiListOAUTH2AuthorizationServersRequest) Count(count int64) ApiListOAUTH2AuthorizationServersRequest {
	r.count = &count
	return r
}
func (r ApiListOAUTH2AuthorizationServersRequest) StartIndex(startIndex int64) ApiListOAUTH2AuthorizationServersRequest {
	r.startIndex = &startIndex
	return r
}
func (r ApiListOAUTH2AuthorizationServersRequest) SortBy(sortBy string) ApiListOAUTH2AuthorizationServersRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiListOAUTH2AuthorizationServersRequest) SortOrder(sortOrder string) ApiListOAUTH2AuthorizationServersRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiListOAUTH2AuthorizationServersRequest) Attributes(attributes []string) ApiListOAUTH2AuthorizationServersRequest {
	r.attributes = &attributes
	return r
}
func (r ApiListOAUTH2AuthorizationServersRequest) ExcludedAttributes(excludedAttributes []string) ApiListOAUTH2AuthorizationServersRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}
func (r ApiListOAUTH2AuthorizationServersRequest) ForTime(forTime time.Time) ApiListOAUTH2AuthorizationServersRequest {
	r.forTime = &forTime
	return r
}

func (r ApiListOAUTH2AuthorizationServersRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ListOAUTH2AuthorizationServersExecute(r)
}

/*
 * ListOAUTH2AuthorizationServers List OAUTH 2.0 Authorization Servers.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListOAUTH2AuthorizationServersRequest
 */
func (a *Oauth2ApiService) ListOAUTH2AuthorizationServers(ctx _context.Context) ApiListOAUTH2AuthorizationServersRequest {
	return ApiListOAUTH2AuthorizationServersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *Oauth2ApiService) ListOAUTH2AuthorizationServersExecute(r ApiListOAUTH2AuthorizationServersRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.ListOAUTH2AuthorizationServers")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/auhtorization-servers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.startIndex != nil {
		localVarQueryParams.Add("startIndex", parameterToString(*r.startIndex, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.attributes != nil {
		t := *r.attributes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("attributes", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("attributes", parameterToString(t, "multi"))
		}
	}
	if r.excludedAttributes != nil {
		t := *r.excludedAttributes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("excludedAttributes", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("excludedAttributes", parameterToString(t, "multi"))
		}
	}
	if r.forTime != nil {
		localVarQueryParams.Add("forTime", parameterToString(*r.forTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListOAUTH2ClientsRequest struct {
	ctx _context.Context
	ApiService *Oauth2ApiService
	filter *string
	count *int64
	startIndex *int64
	sortBy *string
	sortOrder *string
	attributes *[]string
	excludedAttributes *[]string
	forTime *time.Time
}

func (r ApiListOAUTH2ClientsRequest) Filter(filter string) ApiListOAUTH2ClientsRequest {
	r.filter = &filter
	return r
}
func (r ApiListOAUTH2ClientsRequest) Count(count int64) ApiListOAUTH2ClientsRequest {
	r.count = &count
	return r
}
func (r ApiListOAUTH2ClientsRequest) StartIndex(startIndex int64) ApiListOAUTH2ClientsRequest {
	r.startIndex = &startIndex
	return r
}
func (r ApiListOAUTH2ClientsRequest) SortBy(sortBy string) ApiListOAUTH2ClientsRequest {
	r.sortBy = &sortBy
	return r
}
func (r ApiListOAUTH2ClientsRequest) SortOrder(sortOrder string) ApiListOAUTH2ClientsRequest {
	r.sortOrder = &sortOrder
	return r
}
func (r ApiListOAUTH2ClientsRequest) Attributes(attributes []string) ApiListOAUTH2ClientsRequest {
	r.attributes = &attributes
	return r
}
func (r ApiListOAUTH2ClientsRequest) ExcludedAttributes(excludedAttributes []string) ApiListOAUTH2ClientsRequest {
	r.excludedAttributes = &excludedAttributes
	return r
}
func (r ApiListOAUTH2ClientsRequest) ForTime(forTime time.Time) ApiListOAUTH2ClientsRequest {
	r.forTime = &forTime
	return r
}

func (r ApiListOAUTH2ClientsRequest) Execute() (Oauth2ClientList, *_nethttp.Response, error) {
	return r.ApiService.ListOAUTH2ClientsExecute(r)
}

/*
 * ListOAUTH2Clients List OAUTH 2.0 Clients.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListOAUTH2ClientsRequest
 */
func (a *Oauth2ApiService) ListOAUTH2Clients(ctx _context.Context) ApiListOAUTH2ClientsRequest {
	return ApiListOAUTH2ClientsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Oauth2ClientList
 */
func (a *Oauth2ApiService) ListOAUTH2ClientsExecute(r ApiListOAUTH2ClientsRequest) (Oauth2ClientList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Oauth2ClientList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Oauth2ApiService.ListOAUTH2Clients")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth2/clients/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.filter != nil {
		localVarQueryParams.Add("filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.startIndex != nil {
		localVarQueryParams.Add("startIndex", parameterToString(*r.startIndex, ""))
	}
	if r.sortBy != nil {
		localVarQueryParams.Add("sortBy", parameterToString(*r.sortBy, ""))
	}
	if r.sortOrder != nil {
		localVarQueryParams.Add("sortOrder", parameterToString(*r.sortOrder, ""))
	}
	if r.attributes != nil {
		t := *r.attributes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("attributes", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("attributes", parameterToString(t, "multi"))
		}
	}
	if r.excludedAttributes != nil {
		t := *r.excludedAttributes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("excludedAttributes", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("excludedAttributes", parameterToString(t, "multi"))
		}
	}
	if r.forTime != nil {
		localVarQueryParams.Add("forTime", parameterToString(*r.forTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
