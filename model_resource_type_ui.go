/*
Crossid API

# Introduction  Crossid API allows you to manage resources in a simple, programmatic way using conventional HTTP requests.  All of the functionality that you are familiar with in the Crossid UI is also available through this API, allowing you to code actions that suites your requirements.  The rest of this page provides a general overview about the API design and technology that has been implemented.  ## Requests  ## HTTP Statuses  ## Meta  ### Sample Links Object  ## Rate Limit  ## Curl Examples  ## OpenAPI Specification  Crossid API conforms the OpenAPI V3 specification.  The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which  allows both humans and computers to discover and understand the capabilities of the service without access to source  code, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can  understand and interact with the remote service with a minimal amount of implementation logic. Similar to what  interfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service. 

API version: 2.0.0
Contact: api-engineering@crossid.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// ResourceTypeUi Contains hints for the UI how to render this resource type.
type ResourceTypeUi struct {
	// The attributes to display in the resource page.
	Overview *[]string `json:"overview,omitempty"`
	// The attributes to let client edit.
	Edit *[]string `json:"edit,omitempty"`
}

// NewResourceTypeUi instantiates a new ResourceTypeUi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTypeUi() *ResourceTypeUi {
	this := ResourceTypeUi{}
	return &this
}

// NewResourceTypeUiWithDefaults instantiates a new ResourceTypeUi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeUiWithDefaults() *ResourceTypeUi {
	this := ResourceTypeUi{}
	return &this
}

// GetOverview returns the Overview field value if set, zero value otherwise.
func (o *ResourceTypeUi) GetOverview() []string {
	if o == nil || o.Overview == nil {
		var ret []string
		return ret
	}
	return *o.Overview
}

// GetOverviewOk returns a tuple with the Overview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeUi) GetOverviewOk() (*[]string, bool) {
	if o == nil || o.Overview == nil {
		return nil, false
	}
	return o.Overview, true
}

// HasOverview returns a boolean if a field has been set.
func (o *ResourceTypeUi) HasOverview() bool {
	if o != nil && o.Overview != nil {
		return true
	}

	return false
}

// SetOverview gets a reference to the given []string and assigns it to the Overview field.
func (o *ResourceTypeUi) SetOverview(v []string) {
	o.Overview = &v
}

// GetEdit returns the Edit field value if set, zero value otherwise.
func (o *ResourceTypeUi) GetEdit() []string {
	if o == nil || o.Edit == nil {
		var ret []string
		return ret
	}
	return *o.Edit
}

// GetEditOk returns a tuple with the Edit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeUi) GetEditOk() (*[]string, bool) {
	if o == nil || o.Edit == nil {
		return nil, false
	}
	return o.Edit, true
}

// HasEdit returns a boolean if a field has been set.
func (o *ResourceTypeUi) HasEdit() bool {
	if o != nil && o.Edit != nil {
		return true
	}

	return false
}

// SetEdit gets a reference to the given []string and assigns it to the Edit field.
func (o *ResourceTypeUi) SetEdit(v []string) {
	o.Edit = &v
}

func (o ResourceTypeUi) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Overview != nil {
		toSerialize["overview"] = o.Overview
	}
	if o.Edit != nil {
		toSerialize["edit"] = o.Edit
	}
	return json.Marshal(toSerialize)
}

type NullableResourceTypeUi struct {
	value *ResourceTypeUi
	isSet bool
}

func (v NullableResourceTypeUi) Get() *ResourceTypeUi {
	return v.value
}

func (v *NullableResourceTypeUi) Set(val *ResourceTypeUi) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeUi) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeUi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeUi(val *ResourceTypeUi) *NullableResourceTypeUi {
	return &NullableResourceTypeUi{value: val, isSet: true}
}

func (v NullableResourceTypeUi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeUi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


