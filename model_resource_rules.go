/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// ResourceRules struct for ResourceRules
type ResourceRules struct {
	Patch *[]PatchOP `json:"Patch,omitempty"`
	// which rules to check against
	Filter *string `json:"filter,omitempty"`
}

// NewResourceRules instantiates a new ResourceRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceRules() *ResourceRules {
	this := ResourceRules{}
	return &this
}

// NewResourceRulesWithDefaults instantiates a new ResourceRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceRulesWithDefaults() *ResourceRules {
	this := ResourceRules{}
	return &this
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *ResourceRules) GetPatch() []PatchOP {
	if o == nil || o.Patch == nil {
		var ret []PatchOP
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRules) GetPatchOk() (*[]PatchOP, bool) {
	if o == nil || o.Patch == nil {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *ResourceRules) HasPatch() bool {
	if o != nil && o.Patch != nil {
		return true
	}

	return false
}

// SetPatch gets a reference to the given []PatchOP and assigns it to the Patch field.
func (o *ResourceRules) SetPatch(v []PatchOP) {
	o.Patch = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ResourceRules) GetFilter() string {
	if o == nil || o.Filter == nil {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceRules) GetFilterOk() (*string, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ResourceRules) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *ResourceRules) SetFilter(v string) {
	o.Filter = &v
}

func (o ResourceRules) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Patch != nil {
		toSerialize["Patch"] = o.Patch
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	return json.Marshal(toSerialize)
}

type NullableResourceRules struct {
	value *ResourceRules
	isSet bool
}

func (v NullableResourceRules) Get() *ResourceRules {
	return v.value
}

func (v *NullableResourceRules) Set(val *ResourceRules) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceRules) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceRules(val *ResourceRules) *NullableResourceRules {
	return &NullableResourceRules{value: val, isSet: true}
}

func (v NullableResourceRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


