/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// AppChangesBody struct for AppChangesBody
type AppChangesBody struct {
	AppIds *[]string `json:"appIds,omitempty"`
	Mode *string `json:"mode,omitempty"`
}

// NewAppChangesBody instantiates a new AppChangesBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppChangesBody() *AppChangesBody {
	this := AppChangesBody{}
	return &this
}

// NewAppChangesBodyWithDefaults instantiates a new AppChangesBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppChangesBodyWithDefaults() *AppChangesBody {
	this := AppChangesBody{}
	return &this
}

// GetAppIds returns the AppIds field value if set, zero value otherwise.
func (o *AppChangesBody) GetAppIds() []string {
	if o == nil || o.AppIds == nil {
		var ret []string
		return ret
	}
	return *o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppChangesBody) GetAppIdsOk() (*[]string, bool) {
	if o == nil || o.AppIds == nil {
		return nil, false
	}
	return o.AppIds, true
}

// HasAppIds returns a boolean if a field has been set.
func (o *AppChangesBody) HasAppIds() bool {
	if o != nil && o.AppIds != nil {
		return true
	}

	return false
}

// SetAppIds gets a reference to the given []string and assigns it to the AppIds field.
func (o *AppChangesBody) SetAppIds(v []string) {
	o.AppIds = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *AppChangesBody) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppChangesBody) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *AppChangesBody) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *AppChangesBody) SetMode(v string) {
	o.Mode = &v
}

func (o AppChangesBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppIds != nil {
		toSerialize["appIds"] = o.AppIds
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	return json.Marshal(toSerialize)
}

type NullableAppChangesBody struct {
	value *AppChangesBody
	isSet bool
}

func (v NullableAppChangesBody) Get() *AppChangesBody {
	return v.value
}

func (v *NullableAppChangesBody) Set(val *AppChangesBody) {
	v.value = val
	v.isSet = true
}

func (v NullableAppChangesBody) IsSet() bool {
	return v.isSet
}

func (v *NullableAppChangesBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppChangesBody(val *AppChangesBody) *NullableAppChangesBody {
	return &NullableAppChangesBody{value: val, isSet: true}
}

func (v NullableAppChangesBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppChangesBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


