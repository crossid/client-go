/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// EventLogClientUserAgent struct for EventLogClientUserAgent
type EventLogClientUserAgent struct {
	Browser *string `json:"browser,omitempty"`
	Device *string `json:"device,omitempty"`
	Os *string `json:"os,omitempty"`
	Raw *string `json:"raw,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewEventLogClientUserAgent instantiates a new EventLogClientUserAgent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventLogClientUserAgent() *EventLogClientUserAgent {
	this := EventLogClientUserAgent{}
	return &this
}

// NewEventLogClientUserAgentWithDefaults instantiates a new EventLogClientUserAgent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventLogClientUserAgentWithDefaults() *EventLogClientUserAgent {
	this := EventLogClientUserAgent{}
	return &this
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *EventLogClientUserAgent) GetBrowser() string {
	if o == nil || o.Browser == nil {
		var ret string
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClientUserAgent) GetBrowserOk() (*string, bool) {
	if o == nil || o.Browser == nil {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *EventLogClientUserAgent) HasBrowser() bool {
	if o != nil && o.Browser != nil {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given string and assigns it to the Browser field.
func (o *EventLogClientUserAgent) SetBrowser(v string) {
	o.Browser = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *EventLogClientUserAgent) GetDevice() string {
	if o == nil || o.Device == nil {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClientUserAgent) GetDeviceOk() (*string, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *EventLogClientUserAgent) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *EventLogClientUserAgent) SetDevice(v string) {
	o.Device = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *EventLogClientUserAgent) GetOs() string {
	if o == nil || o.Os == nil {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClientUserAgent) GetOsOk() (*string, bool) {
	if o == nil || o.Os == nil {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *EventLogClientUserAgent) HasOs() bool {
	if o != nil && o.Os != nil {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *EventLogClientUserAgent) SetOs(v string) {
	o.Os = &v
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *EventLogClientUserAgent) GetRaw() string {
	if o == nil || o.Raw == nil {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClientUserAgent) GetRawOk() (*string, bool) {
	if o == nil || o.Raw == nil {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *EventLogClientUserAgent) HasRaw() bool {
	if o != nil && o.Raw != nil {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *EventLogClientUserAgent) SetRaw(v string) {
	o.Raw = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventLogClientUserAgent) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClientUserAgent) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventLogClientUserAgent) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventLogClientUserAgent) SetType(v string) {
	o.Type = &v
}

func (o EventLogClientUserAgent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Browser != nil {
		toSerialize["browser"] = o.Browser
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.Os != nil {
		toSerialize["os"] = o.Os
	}
	if o.Raw != nil {
		toSerialize["raw"] = o.Raw
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEventLogClientUserAgent struct {
	value *EventLogClientUserAgent
	isSet bool
}

func (v NullableEventLogClientUserAgent) Get() *EventLogClientUserAgent {
	return v.value
}

func (v *NullableEventLogClientUserAgent) Set(val *EventLogClientUserAgent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventLogClientUserAgent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventLogClientUserAgent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventLogClientUserAgent(val *EventLogClientUserAgent) *NullableEventLogClientUserAgent {
	return &NullableEventLogClientUserAgent{value: val, isSet: true}
}

func (v NullableEventLogClientUserAgent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventLogClientUserAgent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


