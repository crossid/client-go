/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
	"time"
)

// Task struct for Task
type Task struct {
	AssigneeId *string `json:"assigneeId,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Due *time.Time `json:"due,omitempty"`
	Ended *time.Time `json:"ended,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	Flow *TaskFlow `json:"flow,omitempty"`
	FormId *string `json:"formId,omitempty"`
	GroupsIds *[]string `json:"groupsIds,omitempty"`
	Id *string `json:"id,omitempty"`
	Meta *AppMeta `json:"meta,omitempty"`
	OwnerId *string `json:"ownerId,omitempty"`
	Status *string `json:"status,omitempty"`
	UsersIds *[]string `json:"usersIds,omitempty"`
	Variables interface{} `json:"variables,omitempty"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetAssigneeId returns the AssigneeId field value if set, zero value otherwise.
func (o *Task) GetAssigneeId() string {
	if o == nil || o.AssigneeId == nil {
		var ret string
		return ret
	}
	return *o.AssigneeId
}

// GetAssigneeIdOk returns a tuple with the AssigneeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetAssigneeIdOk() (*string, bool) {
	if o == nil || o.AssigneeId == nil {
		return nil, false
	}
	return o.AssigneeId, true
}

// HasAssigneeId returns a boolean if a field has been set.
func (o *Task) HasAssigneeId() bool {
	if o != nil && o.AssigneeId != nil {
		return true
	}

	return false
}

// SetAssigneeId gets a reference to the given string and assigns it to the AssigneeId field.
func (o *Task) SetAssigneeId(v string) {
	o.AssigneeId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Task) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Task) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Task) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Task) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Task) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Task) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDue returns the Due field value if set, zero value otherwise.
func (o *Task) GetDue() time.Time {
	if o == nil || o.Due == nil {
		var ret time.Time
		return ret
	}
	return *o.Due
}

// GetDueOk returns a tuple with the Due field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDueOk() (*time.Time, bool) {
	if o == nil || o.Due == nil {
		return nil, false
	}
	return o.Due, true
}

// HasDue returns a boolean if a field has been set.
func (o *Task) HasDue() bool {
	if o != nil && o.Due != nil {
		return true
	}

	return false
}

// SetDue gets a reference to the given time.Time and assigns it to the Due field.
func (o *Task) SetDue(v time.Time) {
	o.Due = &v
}

// GetEnded returns the Ended field value if set, zero value otherwise.
func (o *Task) GetEnded() time.Time {
	if o == nil || o.Ended == nil {
		var ret time.Time
		return ret
	}
	return *o.Ended
}

// GetEndedOk returns a tuple with the Ended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetEndedOk() (*time.Time, bool) {
	if o == nil || o.Ended == nil {
		return nil, false
	}
	return o.Ended, true
}

// HasEnded returns a boolean if a field has been set.
func (o *Task) HasEnded() bool {
	if o != nil && o.Ended != nil {
		return true
	}

	return false
}

// SetEnded gets a reference to the given time.Time and assigns it to the Ended field.
func (o *Task) SetEnded(v time.Time) {
	o.Ended = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Task) GetExternalId() string {
	if o == nil || o.ExternalId == nil {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetExternalIdOk() (*string, bool) {
	if o == nil || o.ExternalId == nil {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *Task) HasExternalId() bool {
	if o != nil && o.ExternalId != nil {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Task) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetFlow returns the Flow field value if set, zero value otherwise.
func (o *Task) GetFlow() TaskFlow {
	if o == nil || o.Flow == nil {
		var ret TaskFlow
		return ret
	}
	return *o.Flow
}

// GetFlowOk returns a tuple with the Flow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFlowOk() (*TaskFlow, bool) {
	if o == nil || o.Flow == nil {
		return nil, false
	}
	return o.Flow, true
}

// HasFlow returns a boolean if a field has been set.
func (o *Task) HasFlow() bool {
	if o != nil && o.Flow != nil {
		return true
	}

	return false
}

// SetFlow gets a reference to the given TaskFlow and assigns it to the Flow field.
func (o *Task) SetFlow(v TaskFlow) {
	o.Flow = &v
}

// GetFormId returns the FormId field value if set, zero value otherwise.
func (o *Task) GetFormId() string {
	if o == nil || o.FormId == nil {
		var ret string
		return ret
	}
	return *o.FormId
}

// GetFormIdOk returns a tuple with the FormId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetFormIdOk() (*string, bool) {
	if o == nil || o.FormId == nil {
		return nil, false
	}
	return o.FormId, true
}

// HasFormId returns a boolean if a field has been set.
func (o *Task) HasFormId() bool {
	if o != nil && o.FormId != nil {
		return true
	}

	return false
}

// SetFormId gets a reference to the given string and assigns it to the FormId field.
func (o *Task) SetFormId(v string) {
	o.FormId = &v
}

// GetGroupsIds returns the GroupsIds field value if set, zero value otherwise.
func (o *Task) GetGroupsIds() []string {
	if o == nil || o.GroupsIds == nil {
		var ret []string
		return ret
	}
	return *o.GroupsIds
}

// GetGroupsIdsOk returns a tuple with the GroupsIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetGroupsIdsOk() (*[]string, bool) {
	if o == nil || o.GroupsIds == nil {
		return nil, false
	}
	return o.GroupsIds, true
}

// HasGroupsIds returns a boolean if a field has been set.
func (o *Task) HasGroupsIds() bool {
	if o != nil && o.GroupsIds != nil {
		return true
	}

	return false
}

// SetGroupsIds gets a reference to the given []string and assigns it to the GroupsIds field.
func (o *Task) SetGroupsIds(v []string) {
	o.GroupsIds = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Task) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Task) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Task) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Task) GetMeta() AppMeta {
	if o == nil || o.Meta == nil {
		var ret AppMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetMetaOk() (*AppMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Task) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given AppMeta and assigns it to the Meta field.
func (o *Task) SetMeta(v AppMeta) {
	o.Meta = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *Task) GetOwnerId() string {
	if o == nil || o.OwnerId == nil {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOwnerIdOk() (*string, bool) {
	if o == nil || o.OwnerId == nil {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *Task) HasOwnerId() bool {
	if o != nil && o.OwnerId != nil {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
func (o *Task) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Task) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Task) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Task) SetStatus(v string) {
	o.Status = &v
}

// GetUsersIds returns the UsersIds field value if set, zero value otherwise.
func (o *Task) GetUsersIds() []string {
	if o == nil || o.UsersIds == nil {
		var ret []string
		return ret
	}
	return *o.UsersIds
}

// GetUsersIdsOk returns a tuple with the UsersIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetUsersIdsOk() (*[]string, bool) {
	if o == nil || o.UsersIds == nil {
		return nil, false
	}
	return o.UsersIds, true
}

// HasUsersIds returns a boolean if a field has been set.
func (o *Task) HasUsersIds() bool {
	if o != nil && o.UsersIds != nil {
		return true
	}

	return false
}

// SetUsersIds gets a reference to the given []string and assigns it to the UsersIds field.
func (o *Task) SetUsersIds(v []string) {
	o.UsersIds = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Task) GetVariables() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Task) GetVariablesOk() (*interface{}, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return &o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *Task) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given interface{} and assigns it to the Variables field.
func (o *Task) SetVariables(v interface{}) {
	o.Variables = v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssigneeId != nil {
		toSerialize["assigneeId"] = o.AssigneeId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Due != nil {
		toSerialize["due"] = o.Due
	}
	if o.Ended != nil {
		toSerialize["ended"] = o.Ended
	}
	if o.ExternalId != nil {
		toSerialize["externalId"] = o.ExternalId
	}
	if o.Flow != nil {
		toSerialize["flow"] = o.Flow
	}
	if o.FormId != nil {
		toSerialize["formId"] = o.FormId
	}
	if o.GroupsIds != nil {
		toSerialize["groupsIds"] = o.GroupsIds
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.OwnerId != nil {
		toSerialize["ownerId"] = o.OwnerId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UsersIds != nil {
		toSerialize["usersIds"] = o.UsersIds
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	return json.Marshal(toSerialize)
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


