/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// Mapper struct for Mapper
type Mapper struct {
	DisplayName *string `json:"displayName,omitempty"`
	Id *string `json:"id,omitempty"`
	Lang *string `json:"lang,omitempty"`
	Mapper interface{} `json:"mapper,omitempty"`
	Meta *AppMeta `json:"meta,omitempty"`
	Variables *[]MapperVariables `json:"variables,omitempty"`
}

// NewMapper instantiates a new Mapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapper() *Mapper {
	this := Mapper{}
	return &this
}

// NewMapperWithDefaults instantiates a new Mapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapperWithDefaults() *Mapper {
	this := Mapper{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Mapper) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapper) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Mapper) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Mapper) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Mapper) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapper) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Mapper) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Mapper) SetId(v string) {
	o.Id = &v
}

// GetLang returns the Lang field value if set, zero value otherwise.
func (o *Mapper) GetLang() string {
	if o == nil || o.Lang == nil {
		var ret string
		return ret
	}
	return *o.Lang
}

// GetLangOk returns a tuple with the Lang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapper) GetLangOk() (*string, bool) {
	if o == nil || o.Lang == nil {
		return nil, false
	}
	return o.Lang, true
}

// HasLang returns a boolean if a field has been set.
func (o *Mapper) HasLang() bool {
	if o != nil && o.Lang != nil {
		return true
	}

	return false
}

// SetLang gets a reference to the given string and assigns it to the Lang field.
func (o *Mapper) SetLang(v string) {
	o.Lang = &v
}

// GetMapper returns the Mapper field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Mapper) GetMapper() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Mapper
}

// GetMapperOk returns a tuple with the Mapper field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Mapper) GetMapperOk() (*interface{}, bool) {
	if o == nil || o.Mapper == nil {
		return nil, false
	}
	return &o.Mapper, true
}

// HasMapper returns a boolean if a field has been set.
func (o *Mapper) HasMapper() bool {
	if o != nil && o.Mapper != nil {
		return true
	}

	return false
}

// SetMapper gets a reference to the given interface{} and assigns it to the Mapper field.
func (o *Mapper) SetMapper(v interface{}) {
	o.Mapper = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Mapper) GetMeta() AppMeta {
	if o == nil || o.Meta == nil {
		var ret AppMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapper) GetMetaOk() (*AppMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Mapper) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given AppMeta and assigns it to the Meta field.
func (o *Mapper) SetMeta(v AppMeta) {
	o.Meta = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *Mapper) GetVariables() []MapperVariables {
	if o == nil || o.Variables == nil {
		var ret []MapperVariables
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mapper) GetVariablesOk() (*[]MapperVariables, bool) {
	if o == nil || o.Variables == nil {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *Mapper) HasVariables() bool {
	if o != nil && o.Variables != nil {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []MapperVariables and assigns it to the Variables field.
func (o *Mapper) SetVariables(v []MapperVariables) {
	o.Variables = &v
}

func (o Mapper) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Lang != nil {
		toSerialize["lang"] = o.Lang
	}
	if o.Mapper != nil {
		toSerialize["mapper"] = o.Mapper
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Variables != nil {
		toSerialize["variables"] = o.Variables
	}
	return json.Marshal(toSerialize)
}

type NullableMapper struct {
	value *Mapper
	isSet bool
}

func (v NullableMapper) Get() *Mapper {
	return v.value
}

func (v *NullableMapper) Set(val *Mapper) {
	v.value = val
	v.isSet = true
}

func (v NullableMapper) IsSet() bool {
	return v.isSet
}

func (v *NullableMapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapper(val *Mapper) *NullableMapper {
	return &NullableMapper{value: val, isSet: true}
}

func (v NullableMapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


