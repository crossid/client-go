/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// EventLogClientGeoLocation struct for EventLogClientGeoLocation
type EventLogClientGeoLocation struct {
	Lat *float32 `json:"lat,omitempty"`
	Long *float32 `json:"long,omitempty"`
}

// NewEventLogClientGeoLocation instantiates a new EventLogClientGeoLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventLogClientGeoLocation() *EventLogClientGeoLocation {
	this := EventLogClientGeoLocation{}
	return &this
}

// NewEventLogClientGeoLocationWithDefaults instantiates a new EventLogClientGeoLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventLogClientGeoLocationWithDefaults() *EventLogClientGeoLocation {
	this := EventLogClientGeoLocation{}
	return &this
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *EventLogClientGeoLocation) GetLat() float32 {
	if o == nil || o.Lat == nil {
		var ret float32
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClientGeoLocation) GetLatOk() (*float32, bool) {
	if o == nil || o.Lat == nil {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *EventLogClientGeoLocation) HasLat() bool {
	if o != nil && o.Lat != nil {
		return true
	}

	return false
}

// SetLat gets a reference to the given float32 and assigns it to the Lat field.
func (o *EventLogClientGeoLocation) SetLat(v float32) {
	o.Lat = &v
}

// GetLong returns the Long field value if set, zero value otherwise.
func (o *EventLogClientGeoLocation) GetLong() float32 {
	if o == nil || o.Long == nil {
		var ret float32
		return ret
	}
	return *o.Long
}

// GetLongOk returns a tuple with the Long field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClientGeoLocation) GetLongOk() (*float32, bool) {
	if o == nil || o.Long == nil {
		return nil, false
	}
	return o.Long, true
}

// HasLong returns a boolean if a field has been set.
func (o *EventLogClientGeoLocation) HasLong() bool {
	if o != nil && o.Long != nil {
		return true
	}

	return false
}

// SetLong gets a reference to the given float32 and assigns it to the Long field.
func (o *EventLogClientGeoLocation) SetLong(v float32) {
	o.Long = &v
}

func (o EventLogClientGeoLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Lat != nil {
		toSerialize["lat"] = o.Lat
	}
	if o.Long != nil {
		toSerialize["long"] = o.Long
	}
	return json.Marshal(toSerialize)
}

type NullableEventLogClientGeoLocation struct {
	value *EventLogClientGeoLocation
	isSet bool
}

func (v NullableEventLogClientGeoLocation) Get() *EventLogClientGeoLocation {
	return v.value
}

func (v *NullableEventLogClientGeoLocation) Set(val *EventLogClientGeoLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableEventLogClientGeoLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableEventLogClientGeoLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventLogClientGeoLocation(val *EventLogClientGeoLocation) *NullableEventLogClientGeoLocation {
	return &NullableEventLogClientGeoLocation{value: val, isSet: true}
}

func (v NullableEventLogClientGeoLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventLogClientGeoLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


