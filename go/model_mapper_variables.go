/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// MapperVariables struct for MapperVariables
type MapperVariables struct {
	Expr *string `json:"expr,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewMapperVariables instantiates a new MapperVariables object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapperVariables() *MapperVariables {
	this := MapperVariables{}
	return &this
}

// NewMapperVariablesWithDefaults instantiates a new MapperVariables object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapperVariablesWithDefaults() *MapperVariables {
	this := MapperVariables{}
	return &this
}

// GetExpr returns the Expr field value if set, zero value otherwise.
func (o *MapperVariables) GetExpr() string {
	if o == nil || o.Expr == nil {
		var ret string
		return ret
	}
	return *o.Expr
}

// GetExprOk returns a tuple with the Expr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapperVariables) GetExprOk() (*string, bool) {
	if o == nil || o.Expr == nil {
		return nil, false
	}
	return o.Expr, true
}

// HasExpr returns a boolean if a field has been set.
func (o *MapperVariables) HasExpr() bool {
	if o != nil && o.Expr != nil {
		return true
	}

	return false
}

// SetExpr gets a reference to the given string and assigns it to the Expr field.
func (o *MapperVariables) SetExpr(v string) {
	o.Expr = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MapperVariables) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapperVariables) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MapperVariables) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MapperVariables) SetName(v string) {
	o.Name = &v
}

func (o MapperVariables) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Expr != nil {
		toSerialize["expr"] = o.Expr
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableMapperVariables struct {
	value *MapperVariables
	isSet bool
}

func (v NullableMapperVariables) Get() *MapperVariables {
	return v.value
}

func (v *NullableMapperVariables) Set(val *MapperVariables) {
	v.value = val
	v.isSet = true
}

func (v NullableMapperVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableMapperVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapperVariables(val *MapperVariables) *NullableMapperVariables {
	return &NullableMapperVariables{value: val, isSet: true}
}

func (v NullableMapperVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapperVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


