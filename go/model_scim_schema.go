/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// SCIMSchema struct for SCIMSchema
type SCIMSchema struct {
	Attributes *[]SCIMSchemaAttribute `json:"attributes,omitempty"`
	// a more detailed description.
	Description *string `json:"description,omitempty"`
	// unique identifier of the schema.
	Id *string `json:"id,omitempty"`
	Meta *Meta `json:"meta,omitempty"`
	// the name of the schema.
	Name *string `json:"name,omitempty"`
}

// NewSCIMSchema instantiates a new SCIMSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSCIMSchema() *SCIMSchema {
	this := SCIMSchema{}
	return &this
}

// NewSCIMSchemaWithDefaults instantiates a new SCIMSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSCIMSchemaWithDefaults() *SCIMSchema {
	this := SCIMSchema{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SCIMSchema) GetAttributes() []SCIMSchemaAttribute {
	if o == nil || o.Attributes == nil {
		var ret []SCIMSchemaAttribute
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCIMSchema) GetAttributesOk() (*[]SCIMSchemaAttribute, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SCIMSchema) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []SCIMSchemaAttribute and assigns it to the Attributes field.
func (o *SCIMSchema) SetAttributes(v []SCIMSchemaAttribute) {
	o.Attributes = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SCIMSchema) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCIMSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SCIMSchema) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SCIMSchema) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SCIMSchema) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCIMSchema) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SCIMSchema) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SCIMSchema) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *SCIMSchema) GetMeta() Meta {
	if o == nil || o.Meta == nil {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCIMSchema) GetMetaOk() (*Meta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *SCIMSchema) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *SCIMSchema) SetMeta(v Meta) {
	o.Meta = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SCIMSchema) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SCIMSchema) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SCIMSchema) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SCIMSchema) SetName(v string) {
	o.Name = &v
}

func (o SCIMSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableSCIMSchema struct {
	value *SCIMSchema
	isSet bool
}

func (v NullableSCIMSchema) Get() *SCIMSchema {
	return v.value
}

func (v *NullableSCIMSchema) Set(val *SCIMSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableSCIMSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableSCIMSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSCIMSchema(val *SCIMSchema) *NullableSCIMSchema {
	return &NullableSCIMSchema{value: val, isSet: true}
}

func (v NullableSCIMSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSCIMSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


