/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// ResourceTypeUi struct for ResourceTypeUi
type ResourceTypeUi struct {
	Edit *[]string `json:"edit,omitempty"`
	Overview *[]string `json:"overview,omitempty"`
	Rules *[]string `json:"rules,omitempty"`
}

// NewResourceTypeUi instantiates a new ResourceTypeUi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTypeUi() *ResourceTypeUi {
	this := ResourceTypeUi{}
	return &this
}

// NewResourceTypeUiWithDefaults instantiates a new ResourceTypeUi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeUiWithDefaults() *ResourceTypeUi {
	this := ResourceTypeUi{}
	return &this
}

// GetEdit returns the Edit field value if set, zero value otherwise.
func (o *ResourceTypeUi) GetEdit() []string {
	if o == nil || o.Edit == nil {
		var ret []string
		return ret
	}
	return *o.Edit
}

// GetEditOk returns a tuple with the Edit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeUi) GetEditOk() (*[]string, bool) {
	if o == nil || o.Edit == nil {
		return nil, false
	}
	return o.Edit, true
}

// HasEdit returns a boolean if a field has been set.
func (o *ResourceTypeUi) HasEdit() bool {
	if o != nil && o.Edit != nil {
		return true
	}

	return false
}

// SetEdit gets a reference to the given []string and assigns it to the Edit field.
func (o *ResourceTypeUi) SetEdit(v []string) {
	o.Edit = &v
}

// GetOverview returns the Overview field value if set, zero value otherwise.
func (o *ResourceTypeUi) GetOverview() []string {
	if o == nil || o.Overview == nil {
		var ret []string
		return ret
	}
	return *o.Overview
}

// GetOverviewOk returns a tuple with the Overview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeUi) GetOverviewOk() (*[]string, bool) {
	if o == nil || o.Overview == nil {
		return nil, false
	}
	return o.Overview, true
}

// HasOverview returns a boolean if a field has been set.
func (o *ResourceTypeUi) HasOverview() bool {
	if o != nil && o.Overview != nil {
		return true
	}

	return false
}

// SetOverview gets a reference to the given []string and assigns it to the Overview field.
func (o *ResourceTypeUi) SetOverview(v []string) {
	o.Overview = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *ResourceTypeUi) GetRules() []string {
	if o == nil || o.Rules == nil {
		var ret []string
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeUi) GetRulesOk() (*[]string, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *ResourceTypeUi) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []string and assigns it to the Rules field.
func (o *ResourceTypeUi) SetRules(v []string) {
	o.Rules = &v
}

func (o ResourceTypeUi) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Edit != nil {
		toSerialize["edit"] = o.Edit
	}
	if o.Overview != nil {
		toSerialize["overview"] = o.Overview
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableResourceTypeUi struct {
	value *ResourceTypeUi
	isSet bool
}

func (v NullableResourceTypeUi) Get() *ResourceTypeUi {
	return v.value
}

func (v *NullableResourceTypeUi) Set(val *ResourceTypeUi) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeUi) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeUi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeUi(val *ResourceTypeUi) *NullableResourceTypeUi {
	return &NullableResourceTypeUi{value: val, isSet: true}
}

func (v NullableResourceTypeUi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeUi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


