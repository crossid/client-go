// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceTypeModel a resource type corresponds to
//
// @see: https://tools.ietf.org/html/rfc7643#section-6
// @see: https://tools.ietf.org/html/rfc7643#section-8.6
//
// swagger:model ResourceTypeModel
type ResourceTypeModel struct {

	// app Id
	AppID string `json:"appId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// Id
	ID string `json:"id,omitempty"`

	// keywords
	Keywords []string `json:"keywords"`

	// name
	Name string `json:"name,omitempty"`

	// schema
	Schema string `json:"schema,omitempty"`

	// schema extensions
	SchemaExtensions []*ResTypeSchemaExt `json:"schemaExtensions"`

	// schema interfaces
	SchemaInterfaces []*ResTypeSchemaExt `json:"schemaInterfaces"`

	// to app mapper
	ToAppMapper string `json:"toApp,omitempty"`

	// to store mapper
	ToStoreMapper string `json:"toStore,omitempty"`

	// UI
	UI map[string][]string `json:"ui,omitempty"`

	// meta
	Meta *Meta `json:"meta,omitempty"`

	// mode
	Mode Mode `json:"mode,omitempty"`

	// operations
	Operations *ResourceOperations `json:"operations,omitempty"`
}

// Validate validates this resource type model
func (m *ResourceTypeModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchemaExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceTypeModel) validateSchemaExtensions(formats strfmt.Registry) error {

	if swag.IsZero(m.SchemaExtensions) { // not required
		return nil
	}

	for i := 0; i < len(m.SchemaExtensions); i++ {
		if swag.IsZero(m.SchemaExtensions[i]) { // not required
			continue
		}

		if m.SchemaExtensions[i] != nil {
			if err := m.SchemaExtensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemaExtensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceTypeModel) validateSchemaInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.SchemaInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.SchemaInterfaces); i++ {
		if swag.IsZero(m.SchemaInterfaces[i]) { // not required
			continue
		}

		if m.SchemaInterfaces[i] != nil {
			if err := m.SchemaInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemaInterfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceTypeModel) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceTypeModel) validateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *ResourceTypeModel) validateOperations(formats strfmt.Registry) error {

	if swag.IsZero(m.Operations) { // not required
		return nil
	}

	if m.Operations != nil {
		if err := m.Operations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operations")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceTypeModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceTypeModel) UnmarshalBinary(b []byte) error {
	var res ResourceTypeModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
