// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppManifest AppManifest A definition of an app manifest.
//
// The app manifest describes every piece of detail related to a managed app.
// This includes details such communication (how to communicate with the app), credentials (how to authenticate the app)
// And how to perform various of actions (e.g., "how to add account on SalesForce app")
//
// swagger:model AppManifest
type AppManifest struct {

	// app Id
	AppID string `json:"appId,omitempty"`

	// app logic
	AppLogic string `json:"appLogic,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// Id
	ID string `json:"id,omitempty"`

	// logo URL
	LogoURL string `json:"logoURL,omitempty"`

	// minion
	Minion string `json:"minion,omitempty"`

	// loaded in runtime
	ResourceTypes map[string]ResourceTypeModel `json:"resourceTypes,omitempty"`

	// config
	Config AppConfig `json:"config,omitempty"`

	// meta
	Meta *Meta `json:"meta,omitempty"`
}

// Validate validates this app manifest
func (m *AppManifest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppManifest) validateResourceTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceTypes) { // not required
		return nil
	}

	for k := range m.ResourceTypes {

		if err := validate.Required("resourceTypes"+"."+k, "body", m.ResourceTypes[k]); err != nil {
			return err
		}
		if val, ok := m.ResourceTypes[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AppManifest) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if err := m.Config.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("config")
		}
		return err
	}

	return nil
}

func (m *AppManifest) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppManifest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppManifest) UnmarshalBinary(b []byte) error {
	var res AppManifest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
