/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// PatchRequest struct for PatchRequest
type PatchRequest struct {
	Operations *[]PatchOP `json:"Operations,omitempty"`
	Revision *int64 `json:"Revision,omitempty"`
}

// NewPatchRequest instantiates a new PatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchRequest() *PatchRequest {
	this := PatchRequest{}
	return &this
}

// NewPatchRequestWithDefaults instantiates a new PatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchRequestWithDefaults() *PatchRequest {
	this := PatchRequest{}
	return &this
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *PatchRequest) GetOperations() []PatchOP {
	if o == nil || o.Operations == nil {
		var ret []PatchOP
		return ret
	}
	return *o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchRequest) GetOperationsOk() (*[]PatchOP, bool) {
	if o == nil || o.Operations == nil {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *PatchRequest) HasOperations() bool {
	if o != nil && o.Operations != nil {
		return true
	}

	return false
}

// SetOperations gets a reference to the given []PatchOP and assigns it to the Operations field.
func (o *PatchRequest) SetOperations(v []PatchOP) {
	o.Operations = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *PatchRequest) GetRevision() int64 {
	if o == nil || o.Revision == nil {
		var ret int64
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchRequest) GetRevisionOk() (*int64, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *PatchRequest) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int64 and assigns it to the Revision field.
func (o *PatchRequest) SetRevision(v int64) {
	o.Revision = &v
}

func (o PatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Operations != nil {
		toSerialize["Operations"] = o.Operations
	}
	if o.Revision != nil {
		toSerialize["Revision"] = o.Revision
	}
	return json.Marshal(toSerialize)
}

type NullablePatchRequest struct {
	value *PatchRequest
	isSet bool
}

func (v NullablePatchRequest) Get() *PatchRequest {
	return v.value
}

func (v *NullablePatchRequest) Set(val *PatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchRequest(val *PatchRequest) *NullablePatchRequest {
	return &NullablePatchRequest{value: val, isSet: true}
}

func (v NullablePatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


