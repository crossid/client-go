/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// LoginFlow struct for LoginFlow
type LoginFlow struct {
	Forced *bool `json:"forced,omitempty"`
	Id *string `json:"id,omitempty"`
	Method *string `json:"method,omitempty"`
	Methods *LoginFlowMethods `json:"methods,omitempty"`
	SsoChallenge *string `json:"ssoChallenge,omitempty"`
}

// NewLoginFlow instantiates a new LoginFlow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginFlow() *LoginFlow {
	this := LoginFlow{}
	return &this
}

// NewLoginFlowWithDefaults instantiates a new LoginFlow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginFlowWithDefaults() *LoginFlow {
	this := LoginFlow{}
	return &this
}

// GetForced returns the Forced field value if set, zero value otherwise.
func (o *LoginFlow) GetForced() bool {
	if o == nil || o.Forced == nil {
		var ret bool
		return ret
	}
	return *o.Forced
}

// GetForcedOk returns a tuple with the Forced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginFlow) GetForcedOk() (*bool, bool) {
	if o == nil || o.Forced == nil {
		return nil, false
	}
	return o.Forced, true
}

// HasForced returns a boolean if a field has been set.
func (o *LoginFlow) HasForced() bool {
	if o != nil && o.Forced != nil {
		return true
	}

	return false
}

// SetForced gets a reference to the given bool and assigns it to the Forced field.
func (o *LoginFlow) SetForced(v bool) {
	o.Forced = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LoginFlow) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginFlow) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LoginFlow) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LoginFlow) SetId(v string) {
	o.Id = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *LoginFlow) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginFlow) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *LoginFlow) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *LoginFlow) SetMethod(v string) {
	o.Method = &v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *LoginFlow) GetMethods() LoginFlowMethods {
	if o == nil || o.Methods == nil {
		var ret LoginFlowMethods
		return ret
	}
	return *o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginFlow) GetMethodsOk() (*LoginFlowMethods, bool) {
	if o == nil || o.Methods == nil {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *LoginFlow) HasMethods() bool {
	if o != nil && o.Methods != nil {
		return true
	}

	return false
}

// SetMethods gets a reference to the given LoginFlowMethods and assigns it to the Methods field.
func (o *LoginFlow) SetMethods(v LoginFlowMethods) {
	o.Methods = &v
}

// GetSsoChallenge returns the SsoChallenge field value if set, zero value otherwise.
func (o *LoginFlow) GetSsoChallenge() string {
	if o == nil || o.SsoChallenge == nil {
		var ret string
		return ret
	}
	return *o.SsoChallenge
}

// GetSsoChallengeOk returns a tuple with the SsoChallenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginFlow) GetSsoChallengeOk() (*string, bool) {
	if o == nil || o.SsoChallenge == nil {
		return nil, false
	}
	return o.SsoChallenge, true
}

// HasSsoChallenge returns a boolean if a field has been set.
func (o *LoginFlow) HasSsoChallenge() bool {
	if o != nil && o.SsoChallenge != nil {
		return true
	}

	return false
}

// SetSsoChallenge gets a reference to the given string and assigns it to the SsoChallenge field.
func (o *LoginFlow) SetSsoChallenge(v string) {
	o.SsoChallenge = &v
}

func (o LoginFlow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Forced != nil {
		toSerialize["forced"] = o.Forced
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Methods != nil {
		toSerialize["methods"] = o.Methods
	}
	if o.SsoChallenge != nil {
		toSerialize["ssoChallenge"] = o.SsoChallenge
	}
	return json.Marshal(toSerialize)
}

type NullableLoginFlow struct {
	value *LoginFlow
	isSet bool
}

func (v NullableLoginFlow) Get() *LoginFlow {
	return v.value
}

func (v *NullableLoginFlow) Set(val *LoginFlow) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginFlow) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginFlow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginFlow(val *LoginFlow) *NullableLoginFlow {
	return &NullableLoginFlow{value: val, isSet: true}
}

func (v NullableLoginFlow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginFlow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


