/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// UserFacingMessage struct for UserFacingMessage
type UserFacingMessage struct {
	Id *int32 `json:"id,omitempty"`
	Text *string `json:"text,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewUserFacingMessage instantiates a new UserFacingMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserFacingMessage() *UserFacingMessage {
	this := UserFacingMessage{}
	return &this
}

// NewUserFacingMessageWithDefaults instantiates a new UserFacingMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFacingMessageWithDefaults() *UserFacingMessage {
	this := UserFacingMessage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserFacingMessage) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFacingMessage) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserFacingMessage) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *UserFacingMessage) SetId(v int32) {
	o.Id = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *UserFacingMessage) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFacingMessage) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *UserFacingMessage) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *UserFacingMessage) SetText(v string) {
	o.Text = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserFacingMessage) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFacingMessage) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserFacingMessage) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserFacingMessage) SetType(v string) {
	o.Type = &v
}

func (o UserFacingMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableUserFacingMessage struct {
	value *UserFacingMessage
	isSet bool
}

func (v NullableUserFacingMessage) Get() *UserFacingMessage {
	return v.value
}

func (v *NullableUserFacingMessage) Set(val *UserFacingMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFacingMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFacingMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFacingMessage(val *UserFacingMessage) *NullableUserFacingMessage {
	return &NullableUserFacingMessage{value: val, isSet: true}
}

func (v NullableUserFacingMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFacingMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


