/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// RegistrationFlowMethod struct for RegistrationFlowMethod
type RegistrationFlowMethod struct {
	Config *RegistrationFlowMethodConfig `json:"config,omitempty"`
	Method *string `json:"method,omitempty"`
}

// NewRegistrationFlowMethod instantiates a new RegistrationFlowMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrationFlowMethod() *RegistrationFlowMethod {
	this := RegistrationFlowMethod{}
	return &this
}

// NewRegistrationFlowMethodWithDefaults instantiates a new RegistrationFlowMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrationFlowMethodWithDefaults() *RegistrationFlowMethod {
	this := RegistrationFlowMethod{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *RegistrationFlowMethod) GetConfig() RegistrationFlowMethodConfig {
	if o == nil || o.Config == nil {
		var ret RegistrationFlowMethodConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationFlowMethod) GetConfigOk() (*RegistrationFlowMethodConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *RegistrationFlowMethod) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given RegistrationFlowMethodConfig and assigns it to the Config field.
func (o *RegistrationFlowMethod) SetConfig(v RegistrationFlowMethodConfig) {
	o.Config = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *RegistrationFlowMethod) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationFlowMethod) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *RegistrationFlowMethod) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *RegistrationFlowMethod) SetMethod(v string) {
	o.Method = &v
}

func (o RegistrationFlowMethod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	return json.Marshal(toSerialize)
}

type NullableRegistrationFlowMethod struct {
	value *RegistrationFlowMethod
	isSet bool
}

func (v NullableRegistrationFlowMethod) Get() *RegistrationFlowMethod {
	return v.value
}

func (v *NullableRegistrationFlowMethod) Set(val *RegistrationFlowMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationFlowMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationFlowMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationFlowMethod(val *RegistrationFlowMethod) *NullableRegistrationFlowMethod {
	return &NullableRegistrationFlowMethod{value: val, isSet: true}
}

func (v NullableRegistrationFlowMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationFlowMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


