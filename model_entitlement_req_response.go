/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// EntitlementReqResponse struct for EntitlementReqResponse
type EntitlementReqResponse struct {
	FlowIds *[]string `json:"flowIds,omitempty"`
	NotCreated *[]string `json:"notCreated,omitempty"`
}

// NewEntitlementReqResponse instantiates a new EntitlementReqResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlementReqResponse() *EntitlementReqResponse {
	this := EntitlementReqResponse{}
	return &this
}

// NewEntitlementReqResponseWithDefaults instantiates a new EntitlementReqResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementReqResponseWithDefaults() *EntitlementReqResponse {
	this := EntitlementReqResponse{}
	return &this
}

// GetFlowIds returns the FlowIds field value if set, zero value otherwise.
func (o *EntitlementReqResponse) GetFlowIds() []string {
	if o == nil || o.FlowIds == nil {
		var ret []string
		return ret
	}
	return *o.FlowIds
}

// GetFlowIdsOk returns a tuple with the FlowIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementReqResponse) GetFlowIdsOk() (*[]string, bool) {
	if o == nil || o.FlowIds == nil {
		return nil, false
	}
	return o.FlowIds, true
}

// HasFlowIds returns a boolean if a field has been set.
func (o *EntitlementReqResponse) HasFlowIds() bool {
	if o != nil && o.FlowIds != nil {
		return true
	}

	return false
}

// SetFlowIds gets a reference to the given []string and assigns it to the FlowIds field.
func (o *EntitlementReqResponse) SetFlowIds(v []string) {
	o.FlowIds = &v
}

// GetNotCreated returns the NotCreated field value if set, zero value otherwise.
func (o *EntitlementReqResponse) GetNotCreated() []string {
	if o == nil || o.NotCreated == nil {
		var ret []string
		return ret
	}
	return *o.NotCreated
}

// GetNotCreatedOk returns a tuple with the NotCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitlementReqResponse) GetNotCreatedOk() (*[]string, bool) {
	if o == nil || o.NotCreated == nil {
		return nil, false
	}
	return o.NotCreated, true
}

// HasNotCreated returns a boolean if a field has been set.
func (o *EntitlementReqResponse) HasNotCreated() bool {
	if o != nil && o.NotCreated != nil {
		return true
	}

	return false
}

// SetNotCreated gets a reference to the given []string and assigns it to the NotCreated field.
func (o *EntitlementReqResponse) SetNotCreated(v []string) {
	o.NotCreated = &v
}

func (o EntitlementReqResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlowIds != nil {
		toSerialize["flowIds"] = o.FlowIds
	}
	if o.NotCreated != nil {
		toSerialize["notCreated"] = o.NotCreated
	}
	return json.Marshal(toSerialize)
}

type NullableEntitlementReqResponse struct {
	value *EntitlementReqResponse
	isSet bool
}

func (v NullableEntitlementReqResponse) Get() *EntitlementReqResponse {
	return v.value
}

func (v *NullableEntitlementReqResponse) Set(val *EntitlementReqResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementReqResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementReqResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementReqResponse(val *EntitlementReqResponse) *NullableEntitlementReqResponse {
	return &NullableEntitlementReqResponse{value: val, isSet: true}
}

func (v NullableEntitlementReqResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementReqResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


