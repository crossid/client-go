/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// TextMessage struct for TextMessage
type TextMessage struct {
	Context *map[string]map[string]interface{} `json:"context,omitempty"`
	Id string `json:"id"`
	Text string `json:"text"`
	Type string `json:"type"`
}

// NewTextMessage instantiates a new TextMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextMessage(id string, text string, type_ string) *TextMessage {
	this := TextMessage{}
	this.Id = id
	this.Text = text
	this.Type = type_
	return &this
}

// NewTextMessageWithDefaults instantiates a new TextMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextMessageWithDefaults() *TextMessage {
	this := TextMessage{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *TextMessage) GetContext() map[string]map[string]interface{} {
	if o == nil || o.Context == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextMessage) GetContextOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *TextMessage) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]map[string]interface{} and assigns it to the Context field.
func (o *TextMessage) SetContext(v map[string]map[string]interface{}) {
	o.Context = &v
}

// GetId returns the Id field value
func (o *TextMessage) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TextMessage) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TextMessage) SetId(v string) {
	o.Id = v
}

// GetText returns the Text field value
func (o *TextMessage) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TextMessage) GetTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TextMessage) SetText(v string) {
	o.Text = v
}

// GetType returns the Type field value
func (o *TextMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TextMessage) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TextMessage) SetType(v string) {
	o.Type = v
}

func (o TextMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTextMessage struct {
	value *TextMessage
	isSet bool
}

func (v NullableTextMessage) Get() *TextMessage {
	return v.value
}

func (v *NullableTextMessage) Set(val *TextMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableTextMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableTextMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextMessage(val *TextMessage) *NullableTextMessage {
	return &NullableTextMessage{value: val, isSet: true}
}

func (v NullableTextMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


