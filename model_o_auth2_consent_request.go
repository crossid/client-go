/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// OAuth2ConsentRequest struct for OAuth2ConsentRequest
type OAuth2ConsentRequest struct {
	Acr *string `json:"acr,omitempty"`
	Challenge *string `json:"challenge,omitempty"`
	Client *OAuth2Client `json:"client,omitempty"`
	Csrf *string `json:"csrf,omitempty"`
	LoginChallenge *string `json:"login_challenge,omitempty"`
	LoginSessionId *string `json:"login_session_id,omitempty"`
	RequestUrl *string `json:"request_url,omitempty"`
	RequestedAccessTokenAudience *[]string `json:"requested_access_token_audience,omitempty"`
	RequestedScope *[]string `json:"requested_scope,omitempty"`
	Skip *bool `json:"skip,omitempty"`
	Subject *string `json:"subject,omitempty"`
}

// NewOAuth2ConsentRequest instantiates a new OAuth2ConsentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth2ConsentRequest() *OAuth2ConsentRequest {
	this := OAuth2ConsentRequest{}
	return &this
}

// NewOAuth2ConsentRequestWithDefaults instantiates a new OAuth2ConsentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth2ConsentRequestWithDefaults() *OAuth2ConsentRequest {
	this := OAuth2ConsentRequest{}
	return &this
}

// GetAcr returns the Acr field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetAcr() string {
	if o == nil || o.Acr == nil {
		var ret string
		return ret
	}
	return *o.Acr
}

// GetAcrOk returns a tuple with the Acr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetAcrOk() (*string, bool) {
	if o == nil || o.Acr == nil {
		return nil, false
	}
	return o.Acr, true
}

// HasAcr returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasAcr() bool {
	if o != nil && o.Acr != nil {
		return true
	}

	return false
}

// SetAcr gets a reference to the given string and assigns it to the Acr field.
func (o *OAuth2ConsentRequest) SetAcr(v string) {
	o.Acr = &v
}

// GetChallenge returns the Challenge field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetChallenge() string {
	if o == nil || o.Challenge == nil {
		var ret string
		return ret
	}
	return *o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetChallengeOk() (*string, bool) {
	if o == nil || o.Challenge == nil {
		return nil, false
	}
	return o.Challenge, true
}

// HasChallenge returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasChallenge() bool {
	if o != nil && o.Challenge != nil {
		return true
	}

	return false
}

// SetChallenge gets a reference to the given string and assigns it to the Challenge field.
func (o *OAuth2ConsentRequest) SetChallenge(v string) {
	o.Challenge = &v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetClient() OAuth2Client {
	if o == nil || o.Client == nil {
		var ret OAuth2Client
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetClientOk() (*OAuth2Client, bool) {
	if o == nil || o.Client == nil {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasClient() bool {
	if o != nil && o.Client != nil {
		return true
	}

	return false
}

// SetClient gets a reference to the given OAuth2Client and assigns it to the Client field.
func (o *OAuth2ConsentRequest) SetClient(v OAuth2Client) {
	o.Client = &v
}

// GetCsrf returns the Csrf field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetCsrf() string {
	if o == nil || o.Csrf == nil {
		var ret string
		return ret
	}
	return *o.Csrf
}

// GetCsrfOk returns a tuple with the Csrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetCsrfOk() (*string, bool) {
	if o == nil || o.Csrf == nil {
		return nil, false
	}
	return o.Csrf, true
}

// HasCsrf returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasCsrf() bool {
	if o != nil && o.Csrf != nil {
		return true
	}

	return false
}

// SetCsrf gets a reference to the given string and assigns it to the Csrf field.
func (o *OAuth2ConsentRequest) SetCsrf(v string) {
	o.Csrf = &v
}

// GetLoginChallenge returns the LoginChallenge field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetLoginChallenge() string {
	if o == nil || o.LoginChallenge == nil {
		var ret string
		return ret
	}
	return *o.LoginChallenge
}

// GetLoginChallengeOk returns a tuple with the LoginChallenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetLoginChallengeOk() (*string, bool) {
	if o == nil || o.LoginChallenge == nil {
		return nil, false
	}
	return o.LoginChallenge, true
}

// HasLoginChallenge returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasLoginChallenge() bool {
	if o != nil && o.LoginChallenge != nil {
		return true
	}

	return false
}

// SetLoginChallenge gets a reference to the given string and assigns it to the LoginChallenge field.
func (o *OAuth2ConsentRequest) SetLoginChallenge(v string) {
	o.LoginChallenge = &v
}

// GetLoginSessionId returns the LoginSessionId field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetLoginSessionId() string {
	if o == nil || o.LoginSessionId == nil {
		var ret string
		return ret
	}
	return *o.LoginSessionId
}

// GetLoginSessionIdOk returns a tuple with the LoginSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetLoginSessionIdOk() (*string, bool) {
	if o == nil || o.LoginSessionId == nil {
		return nil, false
	}
	return o.LoginSessionId, true
}

// HasLoginSessionId returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasLoginSessionId() bool {
	if o != nil && o.LoginSessionId != nil {
		return true
	}

	return false
}

// SetLoginSessionId gets a reference to the given string and assigns it to the LoginSessionId field.
func (o *OAuth2ConsentRequest) SetLoginSessionId(v string) {
	o.LoginSessionId = &v
}

// GetRequestUrl returns the RequestUrl field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetRequestUrl() string {
	if o == nil || o.RequestUrl == nil {
		var ret string
		return ret
	}
	return *o.RequestUrl
}

// GetRequestUrlOk returns a tuple with the RequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetRequestUrlOk() (*string, bool) {
	if o == nil || o.RequestUrl == nil {
		return nil, false
	}
	return o.RequestUrl, true
}

// HasRequestUrl returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasRequestUrl() bool {
	if o != nil && o.RequestUrl != nil {
		return true
	}

	return false
}

// SetRequestUrl gets a reference to the given string and assigns it to the RequestUrl field.
func (o *OAuth2ConsentRequest) SetRequestUrl(v string) {
	o.RequestUrl = &v
}

// GetRequestedAccessTokenAudience returns the RequestedAccessTokenAudience field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetRequestedAccessTokenAudience() []string {
	if o == nil || o.RequestedAccessTokenAudience == nil {
		var ret []string
		return ret
	}
	return *o.RequestedAccessTokenAudience
}

// GetRequestedAccessTokenAudienceOk returns a tuple with the RequestedAccessTokenAudience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetRequestedAccessTokenAudienceOk() (*[]string, bool) {
	if o == nil || o.RequestedAccessTokenAudience == nil {
		return nil, false
	}
	return o.RequestedAccessTokenAudience, true
}

// HasRequestedAccessTokenAudience returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasRequestedAccessTokenAudience() bool {
	if o != nil && o.RequestedAccessTokenAudience != nil {
		return true
	}

	return false
}

// SetRequestedAccessTokenAudience gets a reference to the given []string and assigns it to the RequestedAccessTokenAudience field.
func (o *OAuth2ConsentRequest) SetRequestedAccessTokenAudience(v []string) {
	o.RequestedAccessTokenAudience = &v
}

// GetRequestedScope returns the RequestedScope field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetRequestedScope() []string {
	if o == nil || o.RequestedScope == nil {
		var ret []string
		return ret
	}
	return *o.RequestedScope
}

// GetRequestedScopeOk returns a tuple with the RequestedScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetRequestedScopeOk() (*[]string, bool) {
	if o == nil || o.RequestedScope == nil {
		return nil, false
	}
	return o.RequestedScope, true
}

// HasRequestedScope returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasRequestedScope() bool {
	if o != nil && o.RequestedScope != nil {
		return true
	}

	return false
}

// SetRequestedScope gets a reference to the given []string and assigns it to the RequestedScope field.
func (o *OAuth2ConsentRequest) SetRequestedScope(v []string) {
	o.RequestedScope = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetSkip() bool {
	if o == nil || o.Skip == nil {
		var ret bool
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetSkipOk() (*bool, bool) {
	if o == nil || o.Skip == nil {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasSkip() bool {
	if o != nil && o.Skip != nil {
		return true
	}

	return false
}

// SetSkip gets a reference to the given bool and assigns it to the Skip field.
func (o *OAuth2ConsentRequest) SetSkip(v bool) {
	o.Skip = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *OAuth2ConsentRequest) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuth2ConsentRequest) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *OAuth2ConsentRequest) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *OAuth2ConsentRequest) SetSubject(v string) {
	o.Subject = &v
}

func (o OAuth2ConsentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Acr != nil {
		toSerialize["acr"] = o.Acr
	}
	if o.Challenge != nil {
		toSerialize["challenge"] = o.Challenge
	}
	if o.Client != nil {
		toSerialize["client"] = o.Client
	}
	if o.Csrf != nil {
		toSerialize["csrf"] = o.Csrf
	}
	if o.LoginChallenge != nil {
		toSerialize["login_challenge"] = o.LoginChallenge
	}
	if o.LoginSessionId != nil {
		toSerialize["login_session_id"] = o.LoginSessionId
	}
	if o.RequestUrl != nil {
		toSerialize["request_url"] = o.RequestUrl
	}
	if o.RequestedAccessTokenAudience != nil {
		toSerialize["requested_access_token_audience"] = o.RequestedAccessTokenAudience
	}
	if o.RequestedScope != nil {
		toSerialize["requested_scope"] = o.RequestedScope
	}
	if o.Skip != nil {
		toSerialize["skip"] = o.Skip
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	return json.Marshal(toSerialize)
}

type NullableOAuth2ConsentRequest struct {
	value *OAuth2ConsentRequest
	isSet bool
}

func (v NullableOAuth2ConsentRequest) Get() *OAuth2ConsentRequest {
	return v.value
}

func (v *NullableOAuth2ConsentRequest) Set(val *OAuth2ConsentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2ConsentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2ConsentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2ConsentRequest(val *OAuth2ConsentRequest) *NullableOAuth2ConsentRequest {
	return &NullableOAuth2ConsentRequest{value: val, isSet: true}
}

func (v NullableOAuth2ConsentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2ConsentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


