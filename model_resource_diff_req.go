/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// ResourceDiffReq struct for ResourceDiffReq
type ResourceDiffReq struct {
	Current Resource `json:"current"`
	Desired Resource `json:"desired"`
	IgnoreKeys *[]string `json:"ignoreKeys,omitempty"`
	Location string `json:"location"`
}

// NewResourceDiffReq instantiates a new ResourceDiffReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceDiffReq(current Resource, desired Resource, location string, ) *ResourceDiffReq {
	this := ResourceDiffReq{}
	this.Current = current
	this.Desired = desired
	this.Location = location
	return &this
}

// NewResourceDiffReqWithDefaults instantiates a new ResourceDiffReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceDiffReqWithDefaults() *ResourceDiffReq {
	this := ResourceDiffReq{}
	return &this
}

// GetCurrent returns the Current field value
func (o *ResourceDiffReq) GetCurrent() Resource {
	if o == nil  {
		var ret Resource
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *ResourceDiffReq) GetCurrentOk() (*Resource, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *ResourceDiffReq) SetCurrent(v Resource) {
	o.Current = v
}

// GetDesired returns the Desired field value
func (o *ResourceDiffReq) GetDesired() Resource {
	if o == nil  {
		var ret Resource
		return ret
	}

	return o.Desired
}

// GetDesiredOk returns a tuple with the Desired field value
// and a boolean to check if the value has been set.
func (o *ResourceDiffReq) GetDesiredOk() (*Resource, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Desired, true
}

// SetDesired sets field value
func (o *ResourceDiffReq) SetDesired(v Resource) {
	o.Desired = v
}

// GetIgnoreKeys returns the IgnoreKeys field value if set, zero value otherwise.
func (o *ResourceDiffReq) GetIgnoreKeys() []string {
	if o == nil || o.IgnoreKeys == nil {
		var ret []string
		return ret
	}
	return *o.IgnoreKeys
}

// GetIgnoreKeysOk returns a tuple with the IgnoreKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDiffReq) GetIgnoreKeysOk() (*[]string, bool) {
	if o == nil || o.IgnoreKeys == nil {
		return nil, false
	}
	return o.IgnoreKeys, true
}

// HasIgnoreKeys returns a boolean if a field has been set.
func (o *ResourceDiffReq) HasIgnoreKeys() bool {
	if o != nil && o.IgnoreKeys != nil {
		return true
	}

	return false
}

// SetIgnoreKeys gets a reference to the given []string and assigns it to the IgnoreKeys field.
func (o *ResourceDiffReq) SetIgnoreKeys(v []string) {
	o.IgnoreKeys = &v
}

// GetLocation returns the Location field value
func (o *ResourceDiffReq) GetLocation() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *ResourceDiffReq) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *ResourceDiffReq) SetLocation(v string) {
	o.Location = v
}

func (o ResourceDiffReq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["current"] = o.Current
	}
	if true {
		toSerialize["desired"] = o.Desired
	}
	if o.IgnoreKeys != nil {
		toSerialize["ignoreKeys"] = o.IgnoreKeys
	}
	if true {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableResourceDiffReq struct {
	value *ResourceDiffReq
	isSet bool
}

func (v NullableResourceDiffReq) Get() *ResourceDiffReq {
	return v.value
}

func (v *NullableResourceDiffReq) Set(val *ResourceDiffReq) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceDiffReq) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceDiffReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceDiffReq(val *ResourceDiffReq) *NullableResourceDiffReq {
	return &NullableResourceDiffReq{value: val, isSet: true}
}

func (v NullableResourceDiffReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceDiffReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


