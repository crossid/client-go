/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// AuthErrors struct for AuthErrors
type AuthErrors struct {
	Errors *[]AuthError `json:"errors,omitempty"`
	Id *string `json:"id,omitempty"`
}

// NewAuthErrors instantiates a new AuthErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthErrors() *AuthErrors {
	this := AuthErrors{}
	return &this
}

// NewAuthErrorsWithDefaults instantiates a new AuthErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthErrorsWithDefaults() *AuthErrors {
	this := AuthErrors{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *AuthErrors) GetErrors() []AuthError {
	if o == nil || o.Errors == nil {
		var ret []AuthError
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthErrors) GetErrorsOk() (*[]AuthError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *AuthErrors) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []AuthError and assigns it to the Errors field.
func (o *AuthErrors) SetErrors(v []AuthError) {
	o.Errors = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthErrors) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthErrors) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthErrors) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthErrors) SetId(v string) {
	o.Id = &v
}

func (o AuthErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableAuthErrors struct {
	value *AuthErrors
	isSet bool
}

func (v NullableAuthErrors) Get() *AuthErrors {
	return v.value
}

func (v *NullableAuthErrors) Set(val *AuthErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthErrors(val *AuthErrors) *NullableAuthErrors {
	return &NullableAuthErrors{value: val, isSet: true}
}

func (v NullableAuthErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


