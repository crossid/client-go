/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// EventLogClient struct for EventLogClient
type EventLogClient struct {
	Geo *EventLogClientGeo `json:"geo,omitempty"`
	Ips *[]string `json:"ips,omitempty"`
	UserAgent *EventLogClientUserAgent `json:"userAgent,omitempty"`
}

// NewEventLogClient instantiates a new EventLogClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventLogClient() *EventLogClient {
	this := EventLogClient{}
	return &this
}

// NewEventLogClientWithDefaults instantiates a new EventLogClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventLogClientWithDefaults() *EventLogClient {
	this := EventLogClient{}
	return &this
}

// GetGeo returns the Geo field value if set, zero value otherwise.
func (o *EventLogClient) GetGeo() EventLogClientGeo {
	if o == nil || o.Geo == nil {
		var ret EventLogClientGeo
		return ret
	}
	return *o.Geo
}

// GetGeoOk returns a tuple with the Geo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClient) GetGeoOk() (*EventLogClientGeo, bool) {
	if o == nil || o.Geo == nil {
		return nil, false
	}
	return o.Geo, true
}

// HasGeo returns a boolean if a field has been set.
func (o *EventLogClient) HasGeo() bool {
	if o != nil && o.Geo != nil {
		return true
	}

	return false
}

// SetGeo gets a reference to the given EventLogClientGeo and assigns it to the Geo field.
func (o *EventLogClient) SetGeo(v EventLogClientGeo) {
	o.Geo = &v
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *EventLogClient) GetIps() []string {
	if o == nil || o.Ips == nil {
		var ret []string
		return ret
	}
	return *o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClient) GetIpsOk() (*[]string, bool) {
	if o == nil || o.Ips == nil {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *EventLogClient) HasIps() bool {
	if o != nil && o.Ips != nil {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *EventLogClient) SetIps(v []string) {
	o.Ips = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *EventLogClient) GetUserAgent() EventLogClientUserAgent {
	if o == nil || o.UserAgent == nil {
		var ret EventLogClientUserAgent
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogClient) GetUserAgentOk() (*EventLogClientUserAgent, bool) {
	if o == nil || o.UserAgent == nil {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *EventLogClient) HasUserAgent() bool {
	if o != nil && o.UserAgent != nil {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given EventLogClientUserAgent and assigns it to the UserAgent field.
func (o *EventLogClient) SetUserAgent(v EventLogClientUserAgent) {
	o.UserAgent = &v
}

func (o EventLogClient) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Geo != nil {
		toSerialize["geo"] = o.Geo
	}
	if o.Ips != nil {
		toSerialize["ips"] = o.Ips
	}
	if o.UserAgent != nil {
		toSerialize["userAgent"] = o.UserAgent
	}
	return json.Marshal(toSerialize)
}

type NullableEventLogClient struct {
	value *EventLogClient
	isSet bool
}

func (v NullableEventLogClient) Get() *EventLogClient {
	return v.value
}

func (v *NullableEventLogClient) Set(val *EventLogClient) {
	v.value = val
	v.isSet = true
}

func (v NullableEventLogClient) IsSet() bool {
	return v.isSet
}

func (v *NullableEventLogClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventLogClient(val *EventLogClient) *NullableEventLogClient {
	return &NullableEventLogClient{value: val, isSet: true}
}

func (v NullableEventLogClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventLogClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


