/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// RuleResult struct for RuleResult
type RuleResult struct {
	ModelType *string `json:"modelType,omitempty"`
	Op *string `json:"op,omitempty"`
	Path *string `json:"path,omitempty"`
	Value *interface{} `json:"value,omitempty"`
}

// NewRuleResult instantiates a new RuleResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleResult() *RuleResult {
	this := RuleResult{}
	return &this
}

// NewRuleResultWithDefaults instantiates a new RuleResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleResultWithDefaults() *RuleResult {
	this := RuleResult{}
	return &this
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *RuleResult) GetModelType() string {
	if o == nil || o.ModelType == nil {
		var ret string
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleResult) GetModelTypeOk() (*string, bool) {
	if o == nil || o.ModelType == nil {
		return nil, false
	}
	return o.ModelType, true
}

// HasModelType returns a boolean if a field has been set.
func (o *RuleResult) HasModelType() bool {
	if o != nil && o.ModelType != nil {
		return true
	}

	return false
}

// SetModelType gets a reference to the given string and assigns it to the ModelType field.
func (o *RuleResult) SetModelType(v string) {
	o.ModelType = &v
}

// GetOp returns the Op field value if set, zero value otherwise.
func (o *RuleResult) GetOp() string {
	if o == nil || o.Op == nil {
		var ret string
		return ret
	}
	return *o.Op
}

// GetOpOk returns a tuple with the Op field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleResult) GetOpOk() (*string, bool) {
	if o == nil || o.Op == nil {
		return nil, false
	}
	return o.Op, true
}

// HasOp returns a boolean if a field has been set.
func (o *RuleResult) HasOp() bool {
	if o != nil && o.Op != nil {
		return true
	}

	return false
}

// SetOp gets a reference to the given string and assigns it to the Op field.
func (o *RuleResult) SetOp(v string) {
	o.Op = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *RuleResult) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleResult) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *RuleResult) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *RuleResult) SetPath(v string) {
	o.Path = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RuleResult) GetValue() interface{} {
	if o == nil || o.Value == nil {
		var ret interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleResult) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RuleResult) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *RuleResult) SetValue(v interface{}) {
	o.Value = &v
}

func (o RuleResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ModelType != nil {
		toSerialize["modelType"] = o.ModelType
	}
	if o.Op != nil {
		toSerialize["op"] = o.Op
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableRuleResult struct {
	value *RuleResult
	isSet bool
}

func (v NullableRuleResult) Get() *RuleResult {
	return v.value
}

func (v *NullableRuleResult) Set(val *RuleResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleResult(val *RuleResult) *NullableRuleResult {
	return &NullableRuleResult{value: val, isSet: true}
}

func (v NullableRuleResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


