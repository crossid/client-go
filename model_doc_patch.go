/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
	"time"
)

// DocPatch struct for DocPatch
type DocPatch struct {
	Created *time.Time `json:"created,omitempty"`
	Id *string `json:"id,omitempty"`
	Meta *Meta `json:"meta,omitempty"`
	Patch *[]PatchOP `json:"patch,omitempty"`
}

// NewDocPatch instantiates a new DocPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocPatch() *DocPatch {
	this := DocPatch{}
	return &this
}

// NewDocPatchWithDefaults instantiates a new DocPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocPatchWithDefaults() *DocPatch {
	this := DocPatch{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DocPatch) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocPatch) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DocPatch) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DocPatch) SetCreated(v time.Time) {
	o.Created = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DocPatch) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocPatch) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DocPatch) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DocPatch) SetId(v string) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *DocPatch) GetMeta() Meta {
	if o == nil || o.Meta == nil {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocPatch) GetMetaOk() (*Meta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *DocPatch) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *DocPatch) SetMeta(v Meta) {
	o.Meta = &v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *DocPatch) GetPatch() []PatchOP {
	if o == nil || o.Patch == nil {
		var ret []PatchOP
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocPatch) GetPatchOk() (*[]PatchOP, bool) {
	if o == nil || o.Patch == nil {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *DocPatch) HasPatch() bool {
	if o != nil && o.Patch != nil {
		return true
	}

	return false
}

// SetPatch gets a reference to the given []PatchOP and assigns it to the Patch field.
func (o *DocPatch) SetPatch(v []PatchOP) {
	o.Patch = &v
}

func (o DocPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Patch != nil {
		toSerialize["patch"] = o.Patch
	}
	return json.Marshal(toSerialize)
}

type NullableDocPatch struct {
	value *DocPatch
	isSet bool
}

func (v NullableDocPatch) Get() *DocPatch {
	return v.value
}

func (v *NullableDocPatch) Set(val *DocPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDocPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDocPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocPatch(val *DocPatch) *NullableDocPatch {
	return &NullableDocPatch{value: val, isSet: true}
}

func (v NullableDocPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


