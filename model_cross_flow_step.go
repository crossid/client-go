/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// CrossFlowStep struct for CrossFlowStep
type CrossFlowStep struct {
	Form *Form `json:"form,omitempty"`
	Id string `json:"id"`
	Type string `json:"type"`
}

// NewCrossFlowStep instantiates a new CrossFlowStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrossFlowStep(id string, type_ string) *CrossFlowStep {
	this := CrossFlowStep{}
	this.Id = id
	this.Type = type_
	return &this
}

// NewCrossFlowStepWithDefaults instantiates a new CrossFlowStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrossFlowStepWithDefaults() *CrossFlowStep {
	this := CrossFlowStep{}
	return &this
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *CrossFlowStep) GetForm() Form {
	if o == nil || o.Form == nil {
		var ret Form
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrossFlowStep) GetFormOk() (*Form, bool) {
	if o == nil || o.Form == nil {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *CrossFlowStep) HasForm() bool {
	if o != nil && o.Form != nil {
		return true
	}

	return false
}

// SetForm gets a reference to the given Form and assigns it to the Form field.
func (o *CrossFlowStep) SetForm(v Form) {
	o.Form = &v
}

// GetId returns the Id field value
func (o *CrossFlowStep) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CrossFlowStep) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CrossFlowStep) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *CrossFlowStep) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CrossFlowStep) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CrossFlowStep) SetType(v string) {
	o.Type = v
}

func (o CrossFlowStep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Form != nil {
		toSerialize["form"] = o.Form
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableCrossFlowStep struct {
	value *CrossFlowStep
	isSet bool
}

func (v NullableCrossFlowStep) Get() *CrossFlowStep {
	return v.value
}

func (v *NullableCrossFlowStep) Set(val *CrossFlowStep) {
	v.value = val
	v.isSet = true
}

func (v NullableCrossFlowStep) IsSet() bool {
	return v.isSet
}

func (v *NullableCrossFlowStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrossFlowStep(val *CrossFlowStep) *NullableCrossFlowStep {
	return &NullableCrossFlowStep{value: val, isSet: true}
}

func (v NullableCrossFlowStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrossFlowStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


