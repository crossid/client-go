/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// VerificationFlowMethod struct for VerificationFlowMethod
type VerificationFlowMethod struct {
	Config *VerificationFlowMethodConfig `json:"config,omitempty"`
	Method *string `json:"method,omitempty"`
}

// NewVerificationFlowMethod instantiates a new VerificationFlowMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationFlowMethod() *VerificationFlowMethod {
	this := VerificationFlowMethod{}
	return &this
}

// NewVerificationFlowMethodWithDefaults instantiates a new VerificationFlowMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationFlowMethodWithDefaults() *VerificationFlowMethod {
	this := VerificationFlowMethod{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *VerificationFlowMethod) GetConfig() VerificationFlowMethodConfig {
	if o == nil || o.Config == nil {
		var ret VerificationFlowMethodConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFlowMethod) GetConfigOk() (*VerificationFlowMethodConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *VerificationFlowMethod) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given VerificationFlowMethodConfig and assigns it to the Config field.
func (o *VerificationFlowMethod) SetConfig(v VerificationFlowMethodConfig) {
	o.Config = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *VerificationFlowMethod) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationFlowMethod) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *VerificationFlowMethod) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *VerificationFlowMethod) SetMethod(v string) {
	o.Method = &v
}

func (o VerificationFlowMethod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	return json.Marshal(toSerialize)
}

type NullableVerificationFlowMethod struct {
	value *VerificationFlowMethod
	isSet bool
}

func (v NullableVerificationFlowMethod) Get() *VerificationFlowMethod {
	return v.value
}

func (v *NullableVerificationFlowMethod) Set(val *VerificationFlowMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationFlowMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationFlowMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationFlowMethod(val *VerificationFlowMethod) *NullableVerificationFlowMethod {
	return &NullableVerificationFlowMethod{value: val, isSet: true}
}

func (v NullableVerificationFlowMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationFlowMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


