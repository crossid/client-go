/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// ResourceEval struct for ResourceEval
type ResourceEval struct {
	Effective *[]RuleResult `json:"effective,omitempty"`
	Explanation *map[string]map[string]interface{} `json:"explanation,omitempty"`
}

// NewResourceEval instantiates a new ResourceEval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceEval() *ResourceEval {
	this := ResourceEval{}
	return &this
}

// NewResourceEvalWithDefaults instantiates a new ResourceEval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceEvalWithDefaults() *ResourceEval {
	this := ResourceEval{}
	return &this
}

// GetEffective returns the Effective field value if set, zero value otherwise.
func (o *ResourceEval) GetEffective() []RuleResult {
	if o == nil || o.Effective == nil {
		var ret []RuleResult
		return ret
	}
	return *o.Effective
}

// GetEffectiveOk returns a tuple with the Effective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEval) GetEffectiveOk() (*[]RuleResult, bool) {
	if o == nil || o.Effective == nil {
		return nil, false
	}
	return o.Effective, true
}

// HasEffective returns a boolean if a field has been set.
func (o *ResourceEval) HasEffective() bool {
	if o != nil && o.Effective != nil {
		return true
	}

	return false
}

// SetEffective gets a reference to the given []RuleResult and assigns it to the Effective field.
func (o *ResourceEval) SetEffective(v []RuleResult) {
	o.Effective = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *ResourceEval) GetExplanation() map[string]map[string]interface{} {
	if o == nil || o.Explanation == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceEval) GetExplanationOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Explanation == nil {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *ResourceEval) HasExplanation() bool {
	if o != nil && o.Explanation != nil {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given map[string]map[string]interface{} and assigns it to the Explanation field.
func (o *ResourceEval) SetExplanation(v map[string]map[string]interface{}) {
	o.Explanation = &v
}

func (o ResourceEval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Effective != nil {
		toSerialize["effective"] = o.Effective
	}
	if o.Explanation != nil {
		toSerialize["explanation"] = o.Explanation
	}
	return json.Marshal(toSerialize)
}

type NullableResourceEval struct {
	value *ResourceEval
	isSet bool
}

func (v NullableResourceEval) Get() *ResourceEval {
	return v.value
}

func (v *NullableResourceEval) Set(val *ResourceEval) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceEval) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceEval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceEval(val *ResourceEval) *NullableResourceEval {
	return &NullableResourceEval{value: val, isSet: true}
}

func (v NullableResourceEval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceEval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


