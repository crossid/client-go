// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/crossid/crossid-client-go/models"
)

// ReadyReader is a Reader for the Ready structure.
type ReadyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReadyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReadyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 503:
		result := NewReadyServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReadyOK creates a ReadyOK with default headers values
func NewReadyOK() *ReadyOK {
	return &ReadyOK{}
}

/*ReadyOK handles this case with default header values.

healthOK
*/
type ReadyOK struct {
	Payload *models.HealthOK
}

func (o *ReadyOK) Error() string {
	return fmt.Sprintf("[GET /health/ready][%d] readyOK  %+v", 200, o.Payload)
}

func (o *ReadyOK) GetPayload() *models.HealthOK {
	return o.Payload
}

func (o *ReadyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HealthOK)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReadyServiceUnavailable creates a ReadyServiceUnavailable with default headers values
func NewReadyServiceUnavailable() *ReadyServiceUnavailable {
	return &ReadyServiceUnavailable{}
}

/*ReadyServiceUnavailable handles this case with default header values.

healthFailure
*/
type ReadyServiceUnavailable struct {
	Payload *models.HealthFailure
}

func (o *ReadyServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /health/ready][%d] readyServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ReadyServiceUnavailable) GetPayload() *models.HealthFailure {
	return o.Payload
}

func (o *ReadyServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HealthFailure)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
