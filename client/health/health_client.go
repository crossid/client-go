// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new health API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for health API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Alive(params *AliveParams, authInfo runtime.ClientAuthInfoWriter) (*AliveOK, error)

	Ready(params *ReadyParams, authInfo runtime.ClientAuthInfoWriter) (*ReadyOK, error)

	Version(params *VersionParams, authInfo runtime.ClientAuthInfoWriter) (*VersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Alive checks aliveness

  This endpoint returns an ok status (200) if the node is healthy or service unavailable (503) otherwise.

This endpoint does not check the aliveness of a cluster rather a single node.
*/
func (a *Client) Alive(params *AliveParams, authInfo runtime.ClientAuthInfoWriter) (*AliveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAliveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "alive",
		Method:             "GET",
		PathPattern:        "/health/alive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AliveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AliveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for alive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Ready checks readiness

  This endpoint returns an ok status (200) if the node is ready to handle HTTP requests
*/
func (a *Client) Ready(params *ReadyParams, authInfo runtime.ClientAuthInfoWriter) (*ReadyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ready",
		Method:             "GET",
		PathPattern:        "/health/ready",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReadyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ready: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Version softwares version

  This endpoint returns the software version.
*/
func (a *Client) Version(params *VersionParams, authInfo runtime.ClientAuthInfoWriter) (*VersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "version",
		Method:             "GET",
		PathPattern:        "/health/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for version: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
