// Code generated by go-swagger; DO NOT EDIT.

package api_tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAPITokensParams creates a new ListAPITokensParams object
// with the default values initialized.
func NewListAPITokensParams() *ListAPITokensParams {
	var (
		countDefault = int64(10)
	)
	return &ListAPITokensParams{
		Count: &countDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListAPITokensParamsWithTimeout creates a new ListAPITokensParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAPITokensParamsWithTimeout(timeout time.Duration) *ListAPITokensParams {
	var (
		countDefault = int64(10)
	)
	return &ListAPITokensParams{
		Count: &countDefault,

		timeout: timeout,
	}
}

// NewListAPITokensParamsWithContext creates a new ListAPITokensParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAPITokensParamsWithContext(ctx context.Context) *ListAPITokensParams {
	var (
		countDefault = int64(10)
	)
	return &ListAPITokensParams{
		Count: &countDefault,

		Context: ctx,
	}
}

// NewListAPITokensParamsWithHTTPClient creates a new ListAPITokensParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAPITokensParamsWithHTTPClient(client *http.Client) *ListAPITokensParams {
	var (
		countDefault = int64(10)
	)
	return &ListAPITokensParams{
		Count:      &countDefault,
		HTTPClient: client,
	}
}

/*ListAPITokensParams contains all the parameters to send to the API endpoint
for the list Api tokens operation typically these are written to a http.Request
*/
type ListAPITokensParams struct {

	/*Attributes*/
	Attributes []string
	/*Count*/
	Count *int64
	/*Filter*/
	Filter *string
	/*SortBy*/
	SortBy *string
	/*SortOrder*/
	SortOrder *string
	/*StartIndex*/
	StartIndex *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list Api tokens params
func (o *ListAPITokensParams) WithTimeout(timeout time.Duration) *ListAPITokensParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list Api tokens params
func (o *ListAPITokensParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list Api tokens params
func (o *ListAPITokensParams) WithContext(ctx context.Context) *ListAPITokensParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list Api tokens params
func (o *ListAPITokensParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list Api tokens params
func (o *ListAPITokensParams) WithHTTPClient(client *http.Client) *ListAPITokensParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list Api tokens params
func (o *ListAPITokensParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAttributes adds the attributes to the list Api tokens params
func (o *ListAPITokensParams) WithAttributes(attributes []string) *ListAPITokensParams {
	o.SetAttributes(attributes)
	return o
}

// SetAttributes adds the attributes to the list Api tokens params
func (o *ListAPITokensParams) SetAttributes(attributes []string) {
	o.Attributes = attributes
}

// WithCount adds the count to the list Api tokens params
func (o *ListAPITokensParams) WithCount(count *int64) *ListAPITokensParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the list Api tokens params
func (o *ListAPITokensParams) SetCount(count *int64) {
	o.Count = count
}

// WithFilter adds the filter to the list Api tokens params
func (o *ListAPITokensParams) WithFilter(filter *string) *ListAPITokensParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list Api tokens params
func (o *ListAPITokensParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithSortBy adds the sortBy to the list Api tokens params
func (o *ListAPITokensParams) WithSortBy(sortBy *string) *ListAPITokensParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list Api tokens params
func (o *ListAPITokensParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the list Api tokens params
func (o *ListAPITokensParams) WithSortOrder(sortOrder *string) *ListAPITokensParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the list Api tokens params
func (o *ListAPITokensParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithStartIndex adds the startIndex to the list Api tokens params
func (o *ListAPITokensParams) WithStartIndex(startIndex *int64) *ListAPITokensParams {
	o.SetStartIndex(startIndex)
	return o
}

// SetStartIndex adds the startIndex to the list Api tokens params
func (o *ListAPITokensParams) SetStartIndex(startIndex *int64) {
	o.StartIndex = startIndex
}

// WriteToRequest writes these params to a swagger request
func (o *ListAPITokensParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesAttributes := o.Attributes

	joinedAttributes := swag.JoinByFormat(valuesAttributes, "")
	// query array param attributes
	if err := r.SetQueryParam("attributes", joinedAttributes...); err != nil {
		return err
	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	if o.StartIndex != nil {

		// query param startIndex
		var qrStartIndex int64
		if o.StartIndex != nil {
			qrStartIndex = *o.StartIndex
		}
		qStartIndex := swag.FormatInt64(qrStartIndex)
		if qStartIndex != "" {
			if err := r.SetQueryParam("startIndex", qStartIndex); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
