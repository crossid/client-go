// Code generated by go-swagger; DO NOT EDIT.

package api_tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/crossid/crossid-client-go/models"
)

// InsertAPITokenReader is a Reader for the InsertAPIToken structure.
type InsertAPITokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertAPITokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewInsertAPITokenCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertAPITokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertAPITokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInsertAPITokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInsertAPITokenInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewInsertAPITokenCreated creates a InsertAPITokenCreated with default headers values
func NewInsertAPITokenCreated() *InsertAPITokenCreated {
	return &InsertAPITokenCreated{}
}

/*InsertAPITokenCreated handles this case with default header values.

apiToken
*/
type InsertAPITokenCreated struct {
	Payload *models.APIToken
}

func (o *InsertAPITokenCreated) Error() string {
	return fmt.Sprintf("[POST /api-tokens][%d] insertApiTokenCreated  %+v", 201, o.Payload)
}

func (o *InsertAPITokenCreated) GetPayload() *models.APIToken {
	return o.Payload
}

func (o *InsertAPITokenCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertAPITokenBadRequest creates a InsertAPITokenBadRequest with default headers values
func NewInsertAPITokenBadRequest() *InsertAPITokenBadRequest {
	return &InsertAPITokenBadRequest{}
}

/*InsertAPITokenBadRequest handles this case with default header values.

genericError
*/
type InsertAPITokenBadRequest struct {
	Payload models.GenericError
}

func (o *InsertAPITokenBadRequest) Error() string {
	return fmt.Sprintf("[POST /api-tokens][%d] insertApiTokenBadRequest  %+v", 400, o.Payload)
}

func (o *InsertAPITokenBadRequest) GetPayload() models.GenericError {
	return o.Payload
}

func (o *InsertAPITokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertAPITokenUnauthorized creates a InsertAPITokenUnauthorized with default headers values
func NewInsertAPITokenUnauthorized() *InsertAPITokenUnauthorized {
	return &InsertAPITokenUnauthorized{}
}

/*InsertAPITokenUnauthorized handles this case with default header values.

genericError
*/
type InsertAPITokenUnauthorized struct {
	Payload models.GenericError
}

func (o *InsertAPITokenUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api-tokens][%d] insertApiTokenUnauthorized  %+v", 401, o.Payload)
}

func (o *InsertAPITokenUnauthorized) GetPayload() models.GenericError {
	return o.Payload
}

func (o *InsertAPITokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertAPITokenForbidden creates a InsertAPITokenForbidden with default headers values
func NewInsertAPITokenForbidden() *InsertAPITokenForbidden {
	return &InsertAPITokenForbidden{}
}

/*InsertAPITokenForbidden handles this case with default header values.

genericError
*/
type InsertAPITokenForbidden struct {
	Payload models.GenericError
}

func (o *InsertAPITokenForbidden) Error() string {
	return fmt.Sprintf("[POST /api-tokens][%d] insertApiTokenForbidden  %+v", 403, o.Payload)
}

func (o *InsertAPITokenForbidden) GetPayload() models.GenericError {
	return o.Payload
}

func (o *InsertAPITokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertAPITokenInternalServerError creates a InsertAPITokenInternalServerError with default headers values
func NewInsertAPITokenInternalServerError() *InsertAPITokenInternalServerError {
	return &InsertAPITokenInternalServerError{}
}

/*InsertAPITokenInternalServerError handles this case with default header values.

genericError
*/
type InsertAPITokenInternalServerError struct {
	Payload models.GenericError
}

func (o *InsertAPITokenInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api-tokens][%d] insertApiTokenInternalServerError  %+v", 500, o.Payload)
}

func (o *InsertAPITokenInternalServerError) GetPayload() models.GenericError {
	return o.Payload
}

func (o *InsertAPITokenInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
