/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// ApplyChangesReport struct for ApplyChangesReport
type ApplyChangesReport struct {
	Add *[]ApplyChangeReport `json:"add,omitempty"`
	Delete *[]ApplyChangeReport `json:"delete,omitempty"`
	Detail *string `json:"detail,omitempty"`
	Patch *[]ApplyChangeReport `json:"patch,omitempty"`
	Replace *[]ApplyChangeReport `json:"replace,omitempty"`
}

// NewApplyChangesReport instantiates a new ApplyChangesReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyChangesReport() *ApplyChangesReport {
	this := ApplyChangesReport{}
	return &this
}

// NewApplyChangesReportWithDefaults instantiates a new ApplyChangesReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyChangesReportWithDefaults() *ApplyChangesReport {
	this := ApplyChangesReport{}
	return &this
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *ApplyChangesReport) GetAdd() []ApplyChangeReport {
	if o == nil || o.Add == nil {
		var ret []ApplyChangeReport
		return ret
	}
	return *o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyChangesReport) GetAddOk() (*[]ApplyChangeReport, bool) {
	if o == nil || o.Add == nil {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *ApplyChangesReport) HasAdd() bool {
	if o != nil && o.Add != nil {
		return true
	}

	return false
}

// SetAdd gets a reference to the given []ApplyChangeReport and assigns it to the Add field.
func (o *ApplyChangesReport) SetAdd(v []ApplyChangeReport) {
	o.Add = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *ApplyChangesReport) GetDelete() []ApplyChangeReport {
	if o == nil || o.Delete == nil {
		var ret []ApplyChangeReport
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyChangesReport) GetDeleteOk() (*[]ApplyChangeReport, bool) {
	if o == nil || o.Delete == nil {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *ApplyChangesReport) HasDelete() bool {
	if o != nil && o.Delete != nil {
		return true
	}

	return false
}

// SetDelete gets a reference to the given []ApplyChangeReport and assigns it to the Delete field.
func (o *ApplyChangesReport) SetDelete(v []ApplyChangeReport) {
	o.Delete = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *ApplyChangesReport) GetDetail() string {
	if o == nil || o.Detail == nil {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyChangesReport) GetDetailOk() (*string, bool) {
	if o == nil || o.Detail == nil {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *ApplyChangesReport) HasDetail() bool {
	if o != nil && o.Detail != nil {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *ApplyChangesReport) SetDetail(v string) {
	o.Detail = &v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *ApplyChangesReport) GetPatch() []ApplyChangeReport {
	if o == nil || o.Patch == nil {
		var ret []ApplyChangeReport
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyChangesReport) GetPatchOk() (*[]ApplyChangeReport, bool) {
	if o == nil || o.Patch == nil {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *ApplyChangesReport) HasPatch() bool {
	if o != nil && o.Patch != nil {
		return true
	}

	return false
}

// SetPatch gets a reference to the given []ApplyChangeReport and assigns it to the Patch field.
func (o *ApplyChangesReport) SetPatch(v []ApplyChangeReport) {
	o.Patch = &v
}

// GetReplace returns the Replace field value if set, zero value otherwise.
func (o *ApplyChangesReport) GetReplace() []ApplyChangeReport {
	if o == nil || o.Replace == nil {
		var ret []ApplyChangeReport
		return ret
	}
	return *o.Replace
}

// GetReplaceOk returns a tuple with the Replace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyChangesReport) GetReplaceOk() (*[]ApplyChangeReport, bool) {
	if o == nil || o.Replace == nil {
		return nil, false
	}
	return o.Replace, true
}

// HasReplace returns a boolean if a field has been set.
func (o *ApplyChangesReport) HasReplace() bool {
	if o != nil && o.Replace != nil {
		return true
	}

	return false
}

// SetReplace gets a reference to the given []ApplyChangeReport and assigns it to the Replace field.
func (o *ApplyChangesReport) SetReplace(v []ApplyChangeReport) {
	o.Replace = &v
}

func (o ApplyChangesReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Add != nil {
		toSerialize["add"] = o.Add
	}
	if o.Delete != nil {
		toSerialize["delete"] = o.Delete
	}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if o.Patch != nil {
		toSerialize["patch"] = o.Patch
	}
	if o.Replace != nil {
		toSerialize["replace"] = o.Replace
	}
	return json.Marshal(toSerialize)
}

type NullableApplyChangesReport struct {
	value *ApplyChangesReport
	isSet bool
}

func (v NullableApplyChangesReport) Get() *ApplyChangesReport {
	return v.value
}

func (v *NullableApplyChangesReport) Set(val *ApplyChangesReport) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyChangesReport) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyChangesReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyChangesReport(val *ApplyChangesReport) *NullableApplyChangesReport {
	return &NullableApplyChangesReport{value: val, isSet: true}
}

func (v NullableApplyChangesReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyChangesReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


