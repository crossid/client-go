/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// CancelChangeLogRequest struct for CancelChangeLogRequest
type CancelChangeLogRequest struct {
	AdditionalProperties map[string]interface{}
}

type _CancelChangeLogRequest CancelChangeLogRequest

// NewCancelChangeLogRequest instantiates a new CancelChangeLogRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelChangeLogRequest() *CancelChangeLogRequest {
	this := CancelChangeLogRequest{}
	return &this
}

// NewCancelChangeLogRequestWithDefaults instantiates a new CancelChangeLogRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelChangeLogRequestWithDefaults() *CancelChangeLogRequest {
	this := CancelChangeLogRequest{}
	return &this
}

func (o CancelChangeLogRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CancelChangeLogRequest) UnmarshalJSON(bytes []byte) (err error) {
	varCancelChangeLogRequest := _CancelChangeLogRequest{}

	if err = json.Unmarshal(bytes, &varCancelChangeLogRequest); err == nil {
		*o = CancelChangeLogRequest(varCancelChangeLogRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCancelChangeLogRequest struct {
	value *CancelChangeLogRequest
	isSet bool
}

func (v NullableCancelChangeLogRequest) Get() *CancelChangeLogRequest {
	return v.value
}

func (v *NullableCancelChangeLogRequest) Set(val *CancelChangeLogRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelChangeLogRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelChangeLogRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelChangeLogRequest(val *CancelChangeLogRequest) *NullableCancelChangeLogRequest {
	return &NullableCancelChangeLogRequest{value: val, isSet: true}
}

func (v NullableCancelChangeLogRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelChangeLogRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


