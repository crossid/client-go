/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// EventLogActor struct for EventLogActor
type EventLogActor struct {
	DisplayName *string `json:"displayName,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewEventLogActor instantiates a new EventLogActor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventLogActor() *EventLogActor {
	this := EventLogActor{}
	return &this
}

// NewEventLogActorWithDefaults instantiates a new EventLogActor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventLogActorWithDefaults() *EventLogActor {
	this := EventLogActor{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EventLogActor) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogActor) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EventLogActor) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EventLogActor) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *EventLogActor) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogActor) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *EventLogActor) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *EventLogActor) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventLogActor) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventLogActor) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventLogActor) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventLogActor) SetType(v string) {
	o.Type = &v
}

func (o EventLogActor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEventLogActor struct {
	value *EventLogActor
	isSet bool
}

func (v NullableEventLogActor) Get() *EventLogActor {
	return v.value
}

func (v *NullableEventLogActor) Set(val *EventLogActor) {
	v.value = val
	v.isSet = true
}

func (v NullableEventLogActor) IsSet() bool {
	return v.isSet
}

func (v *NullableEventLogActor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventLogActor(val *EventLogActor) *NullableEventLogActor {
	return &NullableEventLogActor{value: val, isSet: true}
}

func (v NullableEventLogActor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventLogActor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


