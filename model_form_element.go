/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// FormElement struct for FormElement
type FormElement struct {
	Attributes OneOfFormInputAttributesFormAnchorAttributesFormButtonAttributesFormTextAttributes `json:"attributes"`
	Group string `json:"group"`
	Id string `json:"id"`
	Tag string `json:"tag"`
}

// NewFormElement instantiates a new FormElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormElement(attributes OneOfFormInputAttributesFormAnchorAttributesFormButtonAttributesFormTextAttributes, group string, id string, tag string) *FormElement {
	this := FormElement{}
	this.Attributes = attributes
	this.Group = group
	this.Id = id
	this.Tag = tag
	return &this
}

// NewFormElementWithDefaults instantiates a new FormElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormElementWithDefaults() *FormElement {
	this := FormElement{}
	return &this
}

// GetAttributes returns the Attributes field value
func (o *FormElement) GetAttributes() OneOfFormInputAttributesFormAnchorAttributesFormButtonAttributesFormTextAttributes {
	if o == nil {
		var ret OneOfFormInputAttributesFormAnchorAttributesFormButtonAttributesFormTextAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *FormElement) GetAttributesOk() (*OneOfFormInputAttributesFormAnchorAttributesFormButtonAttributesFormTextAttributes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *FormElement) SetAttributes(v OneOfFormInputAttributesFormAnchorAttributesFormButtonAttributesFormTextAttributes) {
	o.Attributes = v
}

// GetGroup returns the Group field value
func (o *FormElement) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *FormElement) GetGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *FormElement) SetGroup(v string) {
	o.Group = v
}

// GetId returns the Id field value
func (o *FormElement) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FormElement) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FormElement) SetId(v string) {
	o.Id = v
}

// GetTag returns the Tag field value
func (o *FormElement) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *FormElement) GetTagOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *FormElement) SetTag(v string) {
	o.Tag = v
}

func (o FormElement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if true {
		toSerialize["group"] = o.Group
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["tag"] = o.Tag
	}
	return json.Marshal(toSerialize)
}

type NullableFormElement struct {
	value *FormElement
	isSet bool
}

func (v NullableFormElement) Get() *FormElement {
	return v.value
}

func (v *NullableFormElement) Set(val *FormElement) {
	v.value = val
	v.isSet = true
}

func (v NullableFormElement) IsSet() bool {
	return v.isSet
}

func (v *NullableFormElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormElement(val *FormElement) *NullableFormElement {
	return &NullableFormElement{value: val, isSet: true}
}

func (v NullableFormElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


