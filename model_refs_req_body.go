/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// RefsReqBody struct for RefsReqBody
type RefsReqBody struct {
	LimitAppIds []string `json:"limitAppIds"`
}

// NewRefsReqBody instantiates a new RefsReqBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefsReqBody(limitAppIds []string) *RefsReqBody {
	this := RefsReqBody{}
	this.LimitAppIds = limitAppIds
	return &this
}

// NewRefsReqBodyWithDefaults instantiates a new RefsReqBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefsReqBodyWithDefaults() *RefsReqBody {
	this := RefsReqBody{}
	return &this
}

// GetLimitAppIds returns the LimitAppIds field value
func (o *RefsReqBody) GetLimitAppIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LimitAppIds
}

// GetLimitAppIdsOk returns a tuple with the LimitAppIds field value
// and a boolean to check if the value has been set.
func (o *RefsReqBody) GetLimitAppIdsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LimitAppIds, true
}

// SetLimitAppIds sets field value
func (o *RefsReqBody) SetLimitAppIds(v []string) {
	o.LimitAppIds = v
}

func (o RefsReqBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["limitAppIds"] = o.LimitAppIds
	}
	return json.Marshal(toSerialize)
}

type NullableRefsReqBody struct {
	value *RefsReqBody
	isSet bool
}

func (v NullableRefsReqBody) Get() *RefsReqBody {
	return v.value
}

func (v *NullableRefsReqBody) Set(val *RefsReqBody) {
	v.value = val
	v.isSet = true
}

func (v NullableRefsReqBody) IsSet() bool {
	return v.isSet
}

func (v *NullableRefsReqBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefsReqBody(val *RefsReqBody) *NullableRefsReqBody {
	return &NullableRefsReqBody{value: val, isSet: true}
}

func (v NullableRefsReqBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefsReqBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


