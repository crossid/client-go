/*
 * CrossID Public API
 *
 * CrossID API Reference 
 *
 * API version: 1.0.0
 * Contact: developer@crossid.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cidclient

import (
	"encoding/json"
)

// AppsListAllOf struct for AppsListAllOf
type AppsListAllOf struct {
	Resources []App `json:"Resources"`
}

// NewAppsListAllOf instantiates a new AppsListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsListAllOf(resources []App, ) *AppsListAllOf {
	this := AppsListAllOf{}
	this.Resources = resources
	return &this
}

// NewAppsListAllOfWithDefaults instantiates a new AppsListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsListAllOfWithDefaults() *AppsListAllOf {
	this := AppsListAllOf{}
	return &this
}

// GetResources returns the Resources field value
func (o *AppsListAllOf) GetResources() []App {
	if o == nil  {
		var ret []App
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *AppsListAllOf) GetResourcesOk() (*[]App, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *AppsListAllOf) SetResources(v []App) {
	o.Resources = v
}

func (o AppsListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableAppsListAllOf struct {
	value *AppsListAllOf
	isSet bool
}

func (v NullableAppsListAllOf) Get() *AppsListAllOf {
	return v.value
}

func (v *NullableAppsListAllOf) Set(val *AppsListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsListAllOf(val *AppsListAllOf) *NullableAppsListAllOf {
	return &NullableAppsListAllOf{value: val, isSet: true}
}

func (v NullableAppsListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


